
UART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080023d8  080023d8  000033d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002404  08002404  0000406c  2**0
                  CONTENTS
  4 .ARM          00000000  08002404  08002404  0000406c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002404  08002404  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002404  08002404  00003404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002408  08002408  00003408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800240c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000006c  08002478  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002478  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073e5  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f8  00000000  00000000  0000b47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000ca78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000512  00000000  00000000  0000d118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f86  00000000  00000000  0000d62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000822f  00000000  00000000  000235b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e5f3  00000000  00000000  0002b7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9dd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001998  00000000  00000000  000a9e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ab7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080023c0 	.word	0x080023c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080023c0 	.word	0x080023c0

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	@ (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	@ (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f947 	bl	80003f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f806 	bl	8002178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	@ (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95f 	bl	800045a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f927 	bl	8000406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	@ (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000068 	.word	0x20000068
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	@ (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000088 	.word	0x20000088

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	@ (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000088 	.word	0x20000088

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b0a      	ldr	r3, [pc, #40]	@ (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f003 0307 	and.w	r3, r3, #7
 8000266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000268:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <__NVIC_SetPriorityGrouping+0x44>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000274:	4013      	ands	r3, r2
 8000276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800028a:	4a04      	ldr	r2, [pc, #16]	@ (800029c <__NVIC_SetPriorityGrouping+0x44>)
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	60d3      	str	r3, [r2, #12]
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <__NVIC_GetPriorityGrouping+0x18>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	f003 0307 	and.w	r3, r3, #7
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	db0b      	blt.n	80002e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 021f 	and.w	r2, r3, #31
 80002d4:	4906      	ldr	r1, [pc, #24]	@ (80002f0 <__NVIC_EnableIRQ+0x34>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	095b      	lsrs	r3, r3, #5
 80002dc:	2001      	movs	r0, #1
 80002de:	fa00 f202 	lsl.w	r2, r0, r2
 80002e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000304:	2b00      	cmp	r3, #0
 8000306:	db0a      	blt.n	800031e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	b2da      	uxtb	r2, r3
 800030c:	490c      	ldr	r1, [pc, #48]	@ (8000340 <__NVIC_SetPriority+0x4c>)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	0112      	lsls	r2, r2, #4
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	440b      	add	r3, r1
 8000318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800031c:	e00a      	b.n	8000334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4908      	ldr	r1, [pc, #32]	@ (8000344 <__NVIC_SetPriority+0x50>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 030f 	and.w	r3, r3, #15
 800032a:	3b04      	subs	r3, #4
 800032c:	0112      	lsls	r2, r2, #4
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	440b      	add	r3, r1
 8000332:	761a      	strb	r2, [r3, #24]
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e100 	.word	0xe000e100
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000348:	b480      	push	{r7}
 800034a:	b089      	sub	sp, #36	@ 0x24
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f003 0307 	and.w	r3, r3, #7
 800035a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	f1c3 0307 	rsb	r3, r3, #7
 8000362:	2b04      	cmp	r3, #4
 8000364:	bf28      	it	cs
 8000366:	2304      	movcs	r3, #4
 8000368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	3304      	adds	r3, #4
 800036e:	2b06      	cmp	r3, #6
 8000370:	d902      	bls.n	8000378 <NVIC_EncodePriority+0x30>
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3b03      	subs	r3, #3
 8000376:	e000      	b.n	800037a <NVIC_EncodePriority+0x32>
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800037c:	f04f 32ff 	mov.w	r2, #4294967295
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	fa02 f303 	lsl.w	r3, r2, r3
 8000386:	43da      	mvns	r2, r3
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	401a      	ands	r2, r3
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000390:	f04f 31ff 	mov.w	r1, #4294967295
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	43d9      	mvns	r1, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a0:	4313      	orrs	r3, r2
         );
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3724      	adds	r7, #36	@ 0x24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80003bc:	d301      	bcc.n	80003c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003be:	2301      	movs	r3, #1
 80003c0:	e00f      	b.n	80003e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003c2:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <SysTick_Config+0x40>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ca:	210f      	movs	r1, #15
 80003cc:	f04f 30ff 	mov.w	r0, #4294967295
 80003d0:	f7ff ff90 	bl	80002f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <SysTick_Config+0x40>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003da:	4b04      	ldr	r3, [pc, #16]	@ (80003ec <SysTick_Config+0x40>)
 80003dc:	2207      	movs	r2, #7
 80003de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	e000e010 	.word	0xe000e010

080003f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f7ff ff2d 	bl	8000258 <__NVIC_SetPriorityGrouping>
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000406:	b580      	push	{r7, lr}
 8000408:	b086      	sub	sp, #24
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
 8000412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000418:	f7ff ff42 	bl	80002a0 <__NVIC_GetPriorityGrouping>
 800041c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	68b9      	ldr	r1, [r7, #8]
 8000422:	6978      	ldr	r0, [r7, #20]
 8000424:	f7ff ff90 	bl	8000348 <NVIC_EncodePriority>
 8000428:	4602      	mov	r2, r0
 800042a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042e:	4611      	mov	r1, r2
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff5f 	bl	80002f4 <__NVIC_SetPriority>
}
 8000436:	bf00      	nop
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	4603      	mov	r3, r0
 8000446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff35 	bl	80002bc <__NVIC_EnableIRQ>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffa2 	bl	80003ac <SysTick_Config>
 8000468:	4603      	mov	r3, r0
}
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000472:	b480      	push	{r7}
 8000474:	b085      	sub	sp, #20
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2b02      	cmp	r3, #2
 8000488:	d008      	beq.n	800049c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2204      	movs	r2, #4
 800048e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2200      	movs	r2, #0
 8000494:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000498:	2301      	movs	r3, #1
 800049a:	e020      	b.n	80004de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f022 020e 	bic.w	r2, r2, #14
 80004aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f022 0201 	bic.w	r2, r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004c4:	2101      	movs	r1, #1
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2201      	movs	r2, #1
 80004d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d005      	beq.n	800050c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2204      	movs	r2, #4
 8000504:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	e051      	b.n	80005b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f022 020e 	bic.w	r2, r2, #14
 800051a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f022 0201 	bic.w	r2, r2, #1
 800052a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a22      	ldr	r2, [pc, #136]	@ (80005bc <HAL_DMA_Abort_IT+0xd4>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d029      	beq.n	800058a <HAL_DMA_Abort_IT+0xa2>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a21      	ldr	r2, [pc, #132]	@ (80005c0 <HAL_DMA_Abort_IT+0xd8>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d022      	beq.n	8000586 <HAL_DMA_Abort_IT+0x9e>
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1f      	ldr	r2, [pc, #124]	@ (80005c4 <HAL_DMA_Abort_IT+0xdc>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d01a      	beq.n	8000580 <HAL_DMA_Abort_IT+0x98>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a1e      	ldr	r2, [pc, #120]	@ (80005c8 <HAL_DMA_Abort_IT+0xe0>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d012      	beq.n	800057a <HAL_DMA_Abort_IT+0x92>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <HAL_DMA_Abort_IT+0xe4>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d00a      	beq.n	8000574 <HAL_DMA_Abort_IT+0x8c>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a1b      	ldr	r2, [pc, #108]	@ (80005d0 <HAL_DMA_Abort_IT+0xe8>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d102      	bne.n	800056e <HAL_DMA_Abort_IT+0x86>
 8000568:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800056c:	e00e      	b.n	800058c <HAL_DMA_Abort_IT+0xa4>
 800056e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000572:	e00b      	b.n	800058c <HAL_DMA_Abort_IT+0xa4>
 8000574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000578:	e008      	b.n	800058c <HAL_DMA_Abort_IT+0xa4>
 800057a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800057e:	e005      	b.n	800058c <HAL_DMA_Abort_IT+0xa4>
 8000580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000584:	e002      	b.n	800058c <HAL_DMA_Abort_IT+0xa4>
 8000586:	2310      	movs	r3, #16
 8000588:	e000      	b.n	800058c <HAL_DMA_Abort_IT+0xa4>
 800058a:	2301      	movs	r3, #1
 800058c:	4a11      	ldr	r2, [pc, #68]	@ (80005d4 <HAL_DMA_Abort_IT+0xec>)
 800058e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2201      	movs	r2, #1
 8000594:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d003      	beq.n	80005b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	4798      	blx	r3
    } 
  }
  return status;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020008 	.word	0x40020008
 80005c0:	4002001c 	.word	0x4002001c
 80005c4:	40020030 	.word	0x40020030
 80005c8:	40020044 	.word	0x40020044
 80005cc:	40020058 	.word	0x40020058
 80005d0:	4002006c 	.word	0x4002006c
 80005d4:	40020000 	.word	0x40020000

080005d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005d8:	b480      	push	{r7}
 80005da:	b08b      	sub	sp, #44	@ 0x2c
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80005e2:	2300      	movs	r3, #0
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005ea:	e169      	b.n	80008c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80005ec:	2201      	movs	r2, #1
 80005ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	69fa      	ldr	r2, [r7, #28]
 80005fc:	4013      	ands	r3, r2
 80005fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000600:	69ba      	ldr	r2, [r7, #24]
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	429a      	cmp	r2, r3
 8000606:	f040 8158 	bne.w	80008ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a9a      	ldr	r2, [pc, #616]	@ (8000878 <HAL_GPIO_Init+0x2a0>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d05e      	beq.n	80006d2 <HAL_GPIO_Init+0xfa>
 8000614:	4a98      	ldr	r2, [pc, #608]	@ (8000878 <HAL_GPIO_Init+0x2a0>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d875      	bhi.n	8000706 <HAL_GPIO_Init+0x12e>
 800061a:	4a98      	ldr	r2, [pc, #608]	@ (800087c <HAL_GPIO_Init+0x2a4>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d058      	beq.n	80006d2 <HAL_GPIO_Init+0xfa>
 8000620:	4a96      	ldr	r2, [pc, #600]	@ (800087c <HAL_GPIO_Init+0x2a4>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d86f      	bhi.n	8000706 <HAL_GPIO_Init+0x12e>
 8000626:	4a96      	ldr	r2, [pc, #600]	@ (8000880 <HAL_GPIO_Init+0x2a8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d052      	beq.n	80006d2 <HAL_GPIO_Init+0xfa>
 800062c:	4a94      	ldr	r2, [pc, #592]	@ (8000880 <HAL_GPIO_Init+0x2a8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d869      	bhi.n	8000706 <HAL_GPIO_Init+0x12e>
 8000632:	4a94      	ldr	r2, [pc, #592]	@ (8000884 <HAL_GPIO_Init+0x2ac>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d04c      	beq.n	80006d2 <HAL_GPIO_Init+0xfa>
 8000638:	4a92      	ldr	r2, [pc, #584]	@ (8000884 <HAL_GPIO_Init+0x2ac>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d863      	bhi.n	8000706 <HAL_GPIO_Init+0x12e>
 800063e:	4a92      	ldr	r2, [pc, #584]	@ (8000888 <HAL_GPIO_Init+0x2b0>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d046      	beq.n	80006d2 <HAL_GPIO_Init+0xfa>
 8000644:	4a90      	ldr	r2, [pc, #576]	@ (8000888 <HAL_GPIO_Init+0x2b0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d85d      	bhi.n	8000706 <HAL_GPIO_Init+0x12e>
 800064a:	2b12      	cmp	r3, #18
 800064c:	d82a      	bhi.n	80006a4 <HAL_GPIO_Init+0xcc>
 800064e:	2b12      	cmp	r3, #18
 8000650:	d859      	bhi.n	8000706 <HAL_GPIO_Init+0x12e>
 8000652:	a201      	add	r2, pc, #4	@ (adr r2, 8000658 <HAL_GPIO_Init+0x80>)
 8000654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000658:	080006d3 	.word	0x080006d3
 800065c:	080006ad 	.word	0x080006ad
 8000660:	080006bf 	.word	0x080006bf
 8000664:	08000701 	.word	0x08000701
 8000668:	08000707 	.word	0x08000707
 800066c:	08000707 	.word	0x08000707
 8000670:	08000707 	.word	0x08000707
 8000674:	08000707 	.word	0x08000707
 8000678:	08000707 	.word	0x08000707
 800067c:	08000707 	.word	0x08000707
 8000680:	08000707 	.word	0x08000707
 8000684:	08000707 	.word	0x08000707
 8000688:	08000707 	.word	0x08000707
 800068c:	08000707 	.word	0x08000707
 8000690:	08000707 	.word	0x08000707
 8000694:	08000707 	.word	0x08000707
 8000698:	08000707 	.word	0x08000707
 800069c:	080006b5 	.word	0x080006b5
 80006a0:	080006c9 	.word	0x080006c9
 80006a4:	4a79      	ldr	r2, [pc, #484]	@ (800088c <HAL_GPIO_Init+0x2b4>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d013      	beq.n	80006d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80006aa:	e02c      	b.n	8000706 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	623b      	str	r3, [r7, #32]
          break;
 80006b2:	e029      	b.n	8000708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	3304      	adds	r3, #4
 80006ba:	623b      	str	r3, [r7, #32]
          break;
 80006bc:	e024      	b.n	8000708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	3308      	adds	r3, #8
 80006c4:	623b      	str	r3, [r7, #32]
          break;
 80006c6:	e01f      	b.n	8000708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	330c      	adds	r3, #12
 80006ce:	623b      	str	r3, [r7, #32]
          break;
 80006d0:	e01a      	b.n	8000708 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006da:	2304      	movs	r3, #4
 80006dc:	623b      	str	r3, [r7, #32]
          break;
 80006de:	e013      	b.n	8000708 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d105      	bne.n	80006f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006e8:	2308      	movs	r3, #8
 80006ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	69fa      	ldr	r2, [r7, #28]
 80006f0:	611a      	str	r2, [r3, #16]
          break;
 80006f2:	e009      	b.n	8000708 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006f4:	2308      	movs	r3, #8
 80006f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	69fa      	ldr	r2, [r7, #28]
 80006fc:	615a      	str	r2, [r3, #20]
          break;
 80006fe:	e003      	b.n	8000708 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
          break;
 8000704:	e000      	b.n	8000708 <HAL_GPIO_Init+0x130>
          break;
 8000706:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2bff      	cmp	r3, #255	@ 0xff
 800070c:	d801      	bhi.n	8000712 <HAL_GPIO_Init+0x13a>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	e001      	b.n	8000716 <HAL_GPIO_Init+0x13e>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3304      	adds	r3, #4
 8000716:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	2bff      	cmp	r3, #255	@ 0xff
 800071c:	d802      	bhi.n	8000724 <HAL_GPIO_Init+0x14c>
 800071e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	e002      	b.n	800072a <HAL_GPIO_Init+0x152>
 8000724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000726:	3b08      	subs	r3, #8
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	210f      	movs	r1, #15
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	401a      	ands	r2, r3
 800073c:	6a39      	ldr	r1, [r7, #32]
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	fa01 f303 	lsl.w	r3, r1, r3
 8000744:	431a      	orrs	r2, r3
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000752:	2b00      	cmp	r3, #0
 8000754:	f000 80b1 	beq.w	80008ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000758:	4b4d      	ldr	r3, [pc, #308]	@ (8000890 <HAL_GPIO_Init+0x2b8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a4c      	ldr	r2, [pc, #304]	@ (8000890 <HAL_GPIO_Init+0x2b8>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b4a      	ldr	r3, [pc, #296]	@ (8000890 <HAL_GPIO_Init+0x2b8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000770:	4a48      	ldr	r2, [pc, #288]	@ (8000894 <HAL_GPIO_Init+0x2bc>)
 8000772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000774:	089b      	lsrs	r3, r3, #2
 8000776:	3302      	adds	r3, #2
 8000778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	f003 0303 	and.w	r3, r3, #3
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	220f      	movs	r2, #15
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	43db      	mvns	r3, r3
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	4013      	ands	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a40      	ldr	r2, [pc, #256]	@ (8000898 <HAL_GPIO_Init+0x2c0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d013      	beq.n	80007c4 <HAL_GPIO_Init+0x1ec>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a3f      	ldr	r2, [pc, #252]	@ (800089c <HAL_GPIO_Init+0x2c4>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d00d      	beq.n	80007c0 <HAL_GPIO_Init+0x1e8>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a3e      	ldr	r2, [pc, #248]	@ (80008a0 <HAL_GPIO_Init+0x2c8>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d007      	beq.n	80007bc <HAL_GPIO_Init+0x1e4>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a3d      	ldr	r2, [pc, #244]	@ (80008a4 <HAL_GPIO_Init+0x2cc>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d101      	bne.n	80007b8 <HAL_GPIO_Init+0x1e0>
 80007b4:	2303      	movs	r3, #3
 80007b6:	e006      	b.n	80007c6 <HAL_GPIO_Init+0x1ee>
 80007b8:	2304      	movs	r3, #4
 80007ba:	e004      	b.n	80007c6 <HAL_GPIO_Init+0x1ee>
 80007bc:	2302      	movs	r3, #2
 80007be:	e002      	b.n	80007c6 <HAL_GPIO_Init+0x1ee>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <HAL_GPIO_Init+0x1ee>
 80007c4:	2300      	movs	r3, #0
 80007c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007c8:	f002 0203 	and.w	r2, r2, #3
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	4093      	lsls	r3, r2
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80007d6:	492f      	ldr	r1, [pc, #188]	@ (8000894 <HAL_GPIO_Init+0x2bc>)
 80007d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	3302      	adds	r3, #2
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d006      	beq.n	80007fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80007f0:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 80007f2:	689a      	ldr	r2, [r3, #8]
 80007f4:	492c      	ldr	r1, [pc, #176]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	608b      	str	r3, [r1, #8]
 80007fc:	e006      	b.n	800080c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80007fe:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	43db      	mvns	r3, r3
 8000806:	4928      	ldr	r1, [pc, #160]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 8000808:	4013      	ands	r3, r2
 800080a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d006      	beq.n	8000826 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000818:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	4922      	ldr	r1, [pc, #136]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	4313      	orrs	r3, r2
 8000822:	60cb      	str	r3, [r1, #12]
 8000824:	e006      	b.n	8000834 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 8000828:	68da      	ldr	r2, [r3, #12]
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	43db      	mvns	r3, r3
 800082e:	491e      	ldr	r1, [pc, #120]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 8000830:	4013      	ands	r3, r2
 8000832:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	4918      	ldr	r1, [pc, #96]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	4313      	orrs	r3, r2
 800084a:	604b      	str	r3, [r1, #4]
 800084c:	e006      	b.n	800085c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	43db      	mvns	r3, r3
 8000856:	4914      	ldr	r1, [pc, #80]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 8000858:	4013      	ands	r3, r2
 800085a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d021      	beq.n	80008ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	490e      	ldr	r1, [pc, #56]	@ (80008a8 <HAL_GPIO_Init+0x2d0>)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4313      	orrs	r3, r2
 8000872:	600b      	str	r3, [r1, #0]
 8000874:	e021      	b.n	80008ba <HAL_GPIO_Init+0x2e2>
 8000876:	bf00      	nop
 8000878:	10320000 	.word	0x10320000
 800087c:	10310000 	.word	0x10310000
 8000880:	10220000 	.word	0x10220000
 8000884:	10210000 	.word	0x10210000
 8000888:	10120000 	.word	0x10120000
 800088c:	10110000 	.word	0x10110000
 8000890:	40021000 	.word	0x40021000
 8000894:	40010000 	.word	0x40010000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00
 80008a0:	40011000 	.word	0x40011000
 80008a4:	40011400 	.word	0x40011400
 80008a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <HAL_GPIO_Init+0x304>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	43db      	mvns	r3, r3
 80008b4:	4909      	ldr	r1, [pc, #36]	@ (80008dc <HAL_GPIO_Init+0x304>)
 80008b6:	4013      	ands	r3, r2
 80008b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80008ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008bc:	3301      	adds	r3, #1
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f47f ae8e 	bne.w	80005ec <HAL_GPIO_Init+0x14>
  }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	372c      	adds	r7, #44	@ 0x2c
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40010400 	.word	0x40010400

080008e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	807b      	strh	r3, [r7, #2]
 80008ec:	4613      	mov	r3, r2
 80008ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008f0:	787b      	ldrb	r3, [r7, #1]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008f6:	887a      	ldrh	r2, [r7, #2]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80008fc:	e003      	b.n	8000906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	041a      	lsls	r2, r3, #16
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	611a      	str	r2, [r3, #16]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800091c:	695a      	ldr	r2, [r3, #20]
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	4013      	ands	r3, r2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d006      	beq.n	8000934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000926:	4a05      	ldr	r2, [pc, #20]	@ (800093c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fa3a 	bl	8001da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40010400 	.word	0x40010400

08000940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e272      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 8087 	beq.w	8000a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000960:	4b92      	ldr	r3, [pc, #584]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 030c 	and.w	r3, r3, #12
 8000968:	2b04      	cmp	r3, #4
 800096a:	d00c      	beq.n	8000986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800096c:	4b8f      	ldr	r3, [pc, #572]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 030c 	and.w	r3, r3, #12
 8000974:	2b08      	cmp	r3, #8
 8000976:	d112      	bne.n	800099e <HAL_RCC_OscConfig+0x5e>
 8000978:	4b8c      	ldr	r3, [pc, #560]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000984:	d10b      	bne.n	800099e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000986:	4b89      	ldr	r3, [pc, #548]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d06c      	beq.n	8000a6c <HAL_RCC_OscConfig+0x12c>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d168      	bne.n	8000a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e24c      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009a6:	d106      	bne.n	80009b6 <HAL_RCC_OscConfig+0x76>
 80009a8:	4b80      	ldr	r3, [pc, #512]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a7f      	ldr	r2, [pc, #508]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	e02e      	b.n	8000a14 <HAL_RCC_OscConfig+0xd4>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10c      	bne.n	80009d8 <HAL_RCC_OscConfig+0x98>
 80009be:	4b7b      	ldr	r3, [pc, #492]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a7a      	ldr	r2, [pc, #488]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	4b78      	ldr	r3, [pc, #480]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a77      	ldr	r2, [pc, #476]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e01d      	b.n	8000a14 <HAL_RCC_OscConfig+0xd4>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80009e0:	d10c      	bne.n	80009fc <HAL_RCC_OscConfig+0xbc>
 80009e2:	4b72      	ldr	r3, [pc, #456]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a71      	ldr	r2, [pc, #452]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	4b6f      	ldr	r3, [pc, #444]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a6e      	ldr	r2, [pc, #440]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	e00b      	b.n	8000a14 <HAL_RCC_OscConfig+0xd4>
 80009fc:	4b6b      	ldr	r3, [pc, #428]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a6a      	ldr	r2, [pc, #424]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b68      	ldr	r3, [pc, #416]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a67      	ldr	r2, [pc, #412]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d013      	beq.n	8000a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fbee 	bl	80001fc <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a24:	f7ff fbea 	bl	80001fc <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b64      	cmp	r3, #100	@ 0x64
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e200      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a36:	4b5d      	ldr	r3, [pc, #372]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f0      	beq.n	8000a24 <HAL_RCC_OscConfig+0xe4>
 8000a42:	e014      	b.n	8000a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a44:	f7ff fbda 	bl	80001fc <HAL_GetTick>
 8000a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a4a:	e008      	b.n	8000a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a4c:	f7ff fbd6 	bl	80001fc <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	2b64      	cmp	r3, #100	@ 0x64
 8000a58:	d901      	bls.n	8000a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e1ec      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a5e:	4b53      	ldr	r3, [pc, #332]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1f0      	bne.n	8000a4c <HAL_RCC_OscConfig+0x10c>
 8000a6a:	e000      	b.n	8000a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d063      	beq.n	8000b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 030c 	and.w	r3, r3, #12
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00b      	beq.n	8000a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a86:	4b49      	ldr	r3, [pc, #292]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 030c 	and.w	r3, r3, #12
 8000a8e:	2b08      	cmp	r3, #8
 8000a90:	d11c      	bne.n	8000acc <HAL_RCC_OscConfig+0x18c>
 8000a92:	4b46      	ldr	r3, [pc, #280]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d116      	bne.n	8000acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d005      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x176>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d001      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e1c0      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	4939      	ldr	r1, [pc, #228]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aca:	e03a      	b.n	8000b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d020      	beq.n	8000b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ad4:	4b36      	ldr	r3, [pc, #216]	@ (8000bb0 <HAL_RCC_OscConfig+0x270>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ada:	f7ff fb8f 	bl	80001fc <HAL_GetTick>
 8000ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae0:	e008      	b.n	8000af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ae2:	f7ff fb8b 	bl	80001fc <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d901      	bls.n	8000af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000af0:	2303      	movs	r3, #3
 8000af2:	e1a1      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000af4:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0f0      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4927      	ldr	r1, [pc, #156]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000b10:	4313      	orrs	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
 8000b14:	e015      	b.n	8000b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <HAL_RCC_OscConfig+0x270>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fb6e 	bl	80001fc <HAL_GetTick>
 8000b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b24:	f7ff fb6a 	bl	80001fc <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e180      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b36:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f0      	bne.n	8000b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d03a      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d019      	beq.n	8000b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <HAL_RCC_OscConfig+0x274>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5c:	f7ff fb4e 	bl	80001fc <HAL_GetTick>
 8000b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b62:	e008      	b.n	8000b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b64:	f7ff fb4a 	bl	80001fc <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e160      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <HAL_RCC_OscConfig+0x26c>)
 8000b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0f0      	beq.n	8000b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f000 face 	bl	8001124 <RCC_Delay>
 8000b88:	e01c      	b.n	8000bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_RCC_OscConfig+0x274>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b90:	f7ff fb34 	bl	80001fc <HAL_GetTick>
 8000b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b96:	e00f      	b.n	8000bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b98:	f7ff fb30 	bl	80001fc <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d908      	bls.n	8000bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e146      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	42420000 	.word	0x42420000
 8000bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb8:	4b92      	ldr	r3, [pc, #584]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1e9      	bne.n	8000b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f000 80a6 	beq.w	8000d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bd6:	4b8b      	ldr	r3, [pc, #556]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10d      	bne.n	8000bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b88      	ldr	r3, [pc, #544]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a87      	ldr	r2, [pc, #540]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b85      	ldr	r3, [pc, #532]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bfe:	4b82      	ldr	r3, [pc, #520]	@ (8000e08 <HAL_RCC_OscConfig+0x4c8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d118      	bne.n	8000c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e08 <HAL_RCC_OscConfig+0x4c8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8000e08 <HAL_RCC_OscConfig+0x4c8>)
 8000c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c16:	f7ff faf1 	bl	80001fc <HAL_GetTick>
 8000c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1c:	e008      	b.n	8000c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c1e:	f7ff faed 	bl	80001fc <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b64      	cmp	r3, #100	@ 0x64
 8000c2a:	d901      	bls.n	8000c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e103      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c30:	4b75      	ldr	r3, [pc, #468]	@ (8000e08 <HAL_RCC_OscConfig+0x4c8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f0      	beq.n	8000c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d106      	bne.n	8000c52 <HAL_RCC_OscConfig+0x312>
 8000c44:	4b6f      	ldr	r3, [pc, #444]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a6e      	ldr	r2, [pc, #440]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6213      	str	r3, [r2, #32]
 8000c50:	e02d      	b.n	8000cae <HAL_RCC_OscConfig+0x36e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x334>
 8000c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c5c:	6a1b      	ldr	r3, [r3, #32]
 8000c5e:	4a69      	ldr	r2, [pc, #420]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c60:	f023 0301 	bic.w	r3, r3, #1
 8000c64:	6213      	str	r3, [r2, #32]
 8000c66:	4b67      	ldr	r3, [pc, #412]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c68:	6a1b      	ldr	r3, [r3, #32]
 8000c6a:	4a66      	ldr	r2, [pc, #408]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c6c:	f023 0304 	bic.w	r3, r3, #4
 8000c70:	6213      	str	r3, [r2, #32]
 8000c72:	e01c      	b.n	8000cae <HAL_RCC_OscConfig+0x36e>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d10c      	bne.n	8000c96 <HAL_RCC_OscConfig+0x356>
 8000c7c:	4b61      	ldr	r3, [pc, #388]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4a60      	ldr	r2, [pc, #384]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6213      	str	r3, [r2, #32]
 8000c88:	4b5e      	ldr	r3, [pc, #376]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6213      	str	r3, [r2, #32]
 8000c94:	e00b      	b.n	8000cae <HAL_RCC_OscConfig+0x36e>
 8000c96:	4b5b      	ldr	r3, [pc, #364]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	4a5a      	ldr	r2, [pc, #360]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000c9c:	f023 0301 	bic.w	r3, r3, #1
 8000ca0:	6213      	str	r3, [r2, #32]
 8000ca2:	4b58      	ldr	r3, [pc, #352]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000ca4:	6a1b      	ldr	r3, [r3, #32]
 8000ca6:	4a57      	ldr	r2, [pc, #348]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000ca8:	f023 0304 	bic.w	r3, r3, #4
 8000cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d015      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb6:	f7ff faa1 	bl	80001fc <HAL_GetTick>
 8000cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cbc:	e00a      	b.n	8000cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cbe:	f7ff fa9d 	bl	80001fc <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e0b1      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0ee      	beq.n	8000cbe <HAL_RCC_OscConfig+0x37e>
 8000ce0:	e014      	b.n	8000d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ce2:	f7ff fa8b 	bl	80001fc <HAL_GetTick>
 8000ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ce8:	e00a      	b.n	8000d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cea:	f7ff fa87 	bl	80001fc <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e09b      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d00:	4b40      	ldr	r3, [pc, #256]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1ee      	bne.n	8000cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d105      	bne.n	8000d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d12:	4b3c      	ldr	r3, [pc, #240]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a3b      	ldr	r2, [pc, #236]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8087 	beq.w	8000e36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d061      	beq.n	8000df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d146      	bne.n	8000dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d3c:	4b33      	ldr	r3, [pc, #204]	@ (8000e0c <HAL_RCC_OscConfig+0x4cc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fa5b 	bl	80001fc <HAL_GetTick>
 8000d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d4a:	f7ff fa57 	bl	80001fc <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e06d      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d5c:	4b29      	ldr	r3, [pc, #164]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f0      	bne.n	8000d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d70:	d108      	bne.n	8000d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d72:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	4921      	ldr	r1, [pc, #132]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d80:	4313      	orrs	r3, r2
 8000d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a19      	ldr	r1, [r3, #32]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d94:	430b      	orrs	r3, r1
 8000d96:	491b      	ldr	r1, [pc, #108]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <HAL_RCC_OscConfig+0x4cc>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fa2b 	bl	80001fc <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000daa:	f7ff fa27 	bl	80001fc <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e03d      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f0      	beq.n	8000daa <HAL_RCC_OscConfig+0x46a>
 8000dc8:	e035      	b.n	8000e36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <HAL_RCC_OscConfig+0x4cc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fa14 	bl	80001fc <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dd8:	f7ff fa10 	bl	80001fc <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e026      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f0      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x498>
 8000df6:	e01e      	b.n	8000e36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d107      	bne.n	8000e10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e019      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40007000 	.word	0x40007000
 8000e0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_RCC_OscConfig+0x500>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e0d0      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e58:	4b6a      	ldr	r3, [pc, #424]	@ (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d910      	bls.n	8000e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e66:	4b67      	ldr	r3, [pc, #412]	@ (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f023 0207 	bic.w	r2, r3, #7
 8000e6e:	4965      	ldr	r1, [pc, #404]	@ (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e76:	4b63      	ldr	r3, [pc, #396]	@ (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d001      	beq.n	8000e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e0b8      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d020      	beq.n	8000ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ea0:	4b59      	ldr	r3, [pc, #356]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a58      	ldr	r2, [pc, #352]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d005      	beq.n	8000ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000eb8:	4b53      	ldr	r3, [pc, #332]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4a52      	ldr	r2, [pc, #328]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000ebe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ec4:	4b50      	ldr	r3, [pc, #320]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	494d      	ldr	r1, [pc, #308]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d040      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d107      	bne.n	8000efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eea:	4b47      	ldr	r3, [pc, #284]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d115      	bne.n	8000f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e07f      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d107      	bne.n	8000f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f02:	4b41      	ldr	r3, [pc, #260]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d109      	bne.n	8000f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e073      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f12:	4b3d      	ldr	r3, [pc, #244]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e06b      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f22:	4b39      	ldr	r3, [pc, #228]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f023 0203 	bic.w	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	4936      	ldr	r1, [pc, #216]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f34:	f7ff f962 	bl	80001fc <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f3a:	e00a      	b.n	8000f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f3c:	f7ff f95e 	bl	80001fc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e053      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 020c 	and.w	r2, r3, #12
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d1eb      	bne.n	8000f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d210      	bcs.n	8000f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f72:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 0207 	bic.w	r2, r3, #7
 8000f7a:	4922      	ldr	r1, [pc, #136]	@ (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d001      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e032      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4916      	ldr	r1, [pc, #88]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d009      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	490e      	ldr	r1, [pc, #56]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fd2:	f000 f821 	bl	8001018 <HAL_RCC_GetSysClockFreq>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	490a      	ldr	r1, [pc, #40]	@ (800100c <HAL_RCC_ClockConfig+0x1c8>)
 8000fe4:	5ccb      	ldrb	r3, [r1, r3]
 8000fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fea:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <HAL_RCC_ClockConfig+0x1cc>)
 8000fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <HAL_RCC_ClockConfig+0x1d0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8c0 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000
 8001008:	40021000 	.word	0x40021000
 800100c:	080023ec 	.word	0x080023ec
 8001010:	20000068 	.word	0x20000068
 8001014:	20000000 	.word	0x20000000

08001018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b04      	cmp	r3, #4
 8001040:	d002      	beq.n	8001048 <HAL_RCC_GetSysClockFreq+0x30>
 8001042:	2b08      	cmp	r3, #8
 8001044:	d003      	beq.n	800104e <HAL_RCC_GetSysClockFreq+0x36>
 8001046:	e027      	b.n	8001098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800104a:	613b      	str	r3, [r7, #16]
      break;
 800104c:	e027      	b.n	800109e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d010      	beq.n	8001088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	0c5b      	lsrs	r3, r3, #17
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	4a11      	ldr	r2, [pc, #68]	@ (80010b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001072:	5cd3      	ldrb	r3, [r2, r3]
 8001074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800107a:	fb03 f202 	mul.w	r2, r3, r2
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	fbb2 f3f3 	udiv	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e004      	b.n	8001092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	613b      	str	r3, [r7, #16]
      break;
 8001096:	e002      	b.n	800109e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800109a:	613b      	str	r3, [r7, #16]
      break;
 800109c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800109e:	693b      	ldr	r3, [r7, #16]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	007a1200 	.word	0x007a1200
 80010b4:	080023d8 	.word	0x080023d8
 80010b8:	080023e8 	.word	0x080023e8
 80010bc:	003d0900 	.word	0x003d0900

080010c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010c4:	4b02      	ldr	r3, [pc, #8]	@ (80010d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000068 	.word	0x20000068

080010d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010d8:	f7ff fff2 	bl	80010c0 <HAL_RCC_GetHCLKFreq>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	4903      	ldr	r1, [pc, #12]	@ (80010f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010ea:	5ccb      	ldrb	r3, [r1, r3]
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	080023fc 	.word	0x080023fc

080010fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001100:	f7ff ffde 	bl	80010c0 <HAL_RCC_GetHCLKFreq>
 8001104:	4602      	mov	r2, r0
 8001106:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	0adb      	lsrs	r3, r3, #11
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	4903      	ldr	r1, [pc, #12]	@ (8001120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	080023fc 	.word	0x080023fc

08001124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <RCC_Delay+0x34>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <RCC_Delay+0x38>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0a5b      	lsrs	r3, r3, #9
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001140:	bf00      	nop
  }
  while (Delay --);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	60fa      	str	r2, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f9      	bne.n	8001140 <RCC_Delay+0x1c>
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000068 	.word	0x20000068
 800115c:	10624dd3 	.word	0x10624dd3

08001160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e042      	b.n	80011f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f001 f828 	bl	80021dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2224      	movs	r2, #36	@ 0x24
 8001190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80011a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fd71 	bl	8001c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80011b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80011c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80011d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2220      	movs	r2, #32
 80011e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2220      	movs	r2, #32
 80011ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af02      	add	r7, sp, #8
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4613      	mov	r3, r2
 800120e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b20      	cmp	r3, #32
 800121e:	d16d      	bne.n	80012fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <HAL_UART_Transmit+0x2c>
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e066      	b.n	80012fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2221      	movs	r2, #33	@ 0x21
 800123a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800123e:	f7fe ffdd 	bl	80001fc <HAL_GetTick>
 8001242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001258:	d108      	bne.n	800126c <HAL_UART_Transmit+0x6c>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d104      	bne.n	800126c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	e003      	b.n	8001274 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001274:	e02a      	b.n	80012cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2200      	movs	r2, #0
 800127e:	2180      	movs	r1, #128	@ 0x80
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 faf9 	bl	8001878 <UART_WaitOnFlagUntilTimeout>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e036      	b.n	80012fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10b      	bne.n	80012ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	3302      	adds	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	e007      	b.n	80012be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	3301      	adds	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1cf      	bne.n	8001276 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2200      	movs	r2, #0
 80012de:	2140      	movs	r1, #64	@ 0x40
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 fac9 	bl	8001878 <UART_WaitOnFlagUntilTimeout>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e006      	b.n	80012fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2220      	movs	r2, #32
 80012f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e000      	b.n	80012fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80012fc:	2302      	movs	r3, #2
  }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ba      	sub	sp, #232	@ 0xe8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800133a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800134e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001352:	f003 0320 	and.w	r3, r3, #32
 8001356:	2b00      	cmp	r3, #0
 8001358:	d009      	beq.n	800136e <HAL_UART_IRQHandler+0x66>
 800135a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fbd1 	bl	8001b0e <UART_Receive_IT>
      return;
 800136c:	e25b      	b.n	8001826 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800136e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80de 	beq.w	8001534 <HAL_UART_IRQHandler+0x22c>
 8001378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d106      	bne.n	8001392 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001388:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80d1 	beq.w	8001534 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <HAL_UART_IRQHandler+0xae>
 800139e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_UART_IRQHandler+0xd2>
 80013c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_UART_IRQHandler+0xf6>
 80013e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f043 0204 	orr.w	r2, r3, #4
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80013fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d011      	beq.n	800142e <HAL_UART_IRQHandler+0x126>
 800140a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	2b00      	cmp	r3, #0
 8001414:	d105      	bne.n	8001422 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	f043 0208 	orr.w	r2, r3, #8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 81f2 	beq.w	800181c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_UART_IRQHandler+0x14e>
 8001444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fb5c 	bl	8001b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <HAL_UART_IRQHandler+0x17a>
 800147a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800147e:	2b00      	cmp	r3, #0
 8001480:	d04f      	beq.n	8001522 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa66 	bl	8001954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d041      	beq.n	800151a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3314      	adds	r3, #20
 800149c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014a4:	e853 3f00 	ldrex	r3, [r3]
 80014a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80014ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3314      	adds	r3, #20
 80014be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80014c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80014c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80014ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80014d2:	e841 2300 	strex	r3, r2, [r1]
 80014d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80014da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1d9      	bne.n	8001496 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d013      	beq.n	8001512 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ee:	4a7e      	ldr	r2, [pc, #504]	@ (80016e8 <HAL_UART_IRQHandler+0x3e0>)
 80014f0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe fff6 	bl	80004e8 <HAL_DMA_Abort_IT>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d016      	beq.n	8001530 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800150c:	4610      	mov	r0, r2
 800150e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001510:	e00e      	b.n	8001530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f99c 	bl	8001850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001518:	e00a      	b.n	8001530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f998 	bl	8001850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001520:	e006      	b.n	8001530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f994 	bl	8001850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800152e:	e175      	b.n	800181c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001530:	bf00      	nop
    return;
 8001532:	e173      	b.n	800181c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	2b01      	cmp	r3, #1
 800153a:	f040 814f 	bne.w	80017dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800153e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8148 	beq.w	80017dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800154c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8141 	beq.w	80017dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80b6 	beq.w	80016ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800158c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8145 	beq.w	8001820 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800159a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800159e:	429a      	cmp	r2, r3
 80015a0:	f080 813e 	bcs.w	8001820 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80015aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b20      	cmp	r3, #32
 80015b4:	f000 8088 	beq.w	80016c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	330c      	adds	r3, #12
 80015be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015c6:	e853 3f00 	ldrex	r3, [r3]
 80015ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80015ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	330c      	adds	r3, #12
 80015e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80015e4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80015e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80015f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015f4:	e841 2300 	strex	r3, r2, [r1]
 80015f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80015fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1d9      	bne.n	80015b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3314      	adds	r3, #20
 800160a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800160c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800160e:	e853 3f00 	ldrex	r3, [r3]
 8001612:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3314      	adds	r3, #20
 8001624:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001628:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800162c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800162e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001630:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001634:	e841 2300 	strex	r3, r2, [r1]
 8001638:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800163a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e1      	bne.n	8001604 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3314      	adds	r3, #20
 8001646:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001648:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800164a:	e853 3f00 	ldrex	r3, [r3]
 800164e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001656:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3314      	adds	r3, #20
 8001660:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001664:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001666:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001668:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800166a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800166c:	e841 2300 	strex	r3, r2, [r1]
 8001670:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e3      	bne.n	8001640 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	330c      	adds	r3, #12
 800168c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800168e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001690:	e853 3f00 	ldrex	r3, [r3]
 8001694:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001698:	f023 0310 	bic.w	r3, r3, #16
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	330c      	adds	r3, #12
 80016a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80016aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80016ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80016b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80016b2:	e841 2300 	strex	r3, r2, [r1]
 80016b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80016b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1e3      	bne.n	8001686 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fed5 	bl	8000472 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4619      	mov	r1, r3
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8bf 	bl	8001862 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80016e4:	e09c      	b.n	8001820 <HAL_UART_IRQHandler+0x518>
 80016e6:	bf00      	nop
 80016e8:	08001a19 	.word	0x08001a19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001700:	b29b      	uxth	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 808e 	beq.w	8001824 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8089 	beq.w	8001824 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	330c      	adds	r3, #12
 8001718:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800171a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800171c:	e853 3f00 	ldrex	r3, [r3]
 8001720:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001728:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	330c      	adds	r3, #12
 8001732:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001736:	647a      	str	r2, [r7, #68]	@ 0x44
 8001738:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800173a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800173c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800173e:	e841 2300 	strex	r3, r2, [r1]
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1e3      	bne.n	8001712 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3314      	adds	r3, #20
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	e853 3f00 	ldrex	r3, [r3]
 8001758:	623b      	str	r3, [r7, #32]
   return(result);
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3314      	adds	r3, #20
 800176a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800176e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001776:	e841 2300 	strex	r3, r2, [r1]
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e3      	bne.n	800174a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	330c      	adds	r3, #12
 8001796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	e853 3f00 	ldrex	r3, [r3]
 800179e:	60fb      	str	r3, [r7, #12]
   return(result);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 0310 	bic.w	r3, r3, #16
 80017a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	330c      	adds	r3, #12
 80017b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80017b4:	61fa      	str	r2, [r7, #28]
 80017b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017b8:	69b9      	ldr	r1, [r7, #24]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	e841 2300 	strex	r3, r2, [r1]
 80017c0:	617b      	str	r3, [r7, #20]
   return(result);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1e3      	bne.n	8001790 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2202      	movs	r2, #2
 80017cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80017ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f844 	bl	8001862 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80017da:	e023      	b.n	8001824 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80017dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80017e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d009      	beq.n	80017fc <HAL_UART_IRQHandler+0x4f4>
 80017e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80017ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f923 	bl	8001a40 <UART_Transmit_IT>
    return;
 80017fa:	e014      	b.n	8001826 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80017fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00e      	beq.n	8001826 <HAL_UART_IRQHandler+0x51e>
 8001808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800180c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f962 	bl	8001ade <UART_EndTransmit_IT>
    return;
 800181a:	e004      	b.n	8001826 <HAL_UART_IRQHandler+0x51e>
    return;
 800181c:	bf00      	nop
 800181e:	e002      	b.n	8001826 <HAL_UART_IRQHandler+0x51e>
      return;
 8001820:	bf00      	nop
 8001822:	e000      	b.n	8001826 <HAL_UART_IRQHandler+0x51e>
      return;
 8001824:	bf00      	nop
  }
}
 8001826:	37e8      	adds	r7, #232	@ 0xe8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b090      	sub	sp, #64	@ 0x40
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001888:	e050      	b.n	800192c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800188a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d04c      	beq.n	800192c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001898:	f7fe fcb0 	bl	80001fc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d241      	bcs.n	800192c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	330c      	adds	r3, #12
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b2:	e853 3f00 	ldrex	r3, [r3]
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	330c      	adds	r3, #12
 80018c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d0:	e841 2300 	strex	r3, r2, [r1]
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80018d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e5      	bne.n	80018a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3314      	adds	r3, #20
 80018e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	e853 3f00 	ldrex	r3, [r3]
 80018ea:	613b      	str	r3, [r7, #16]
   return(result);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3314      	adds	r3, #20
 80018fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018fc:	623a      	str	r2, [r7, #32]
 80018fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001900:	69f9      	ldr	r1, [r7, #28]
 8001902:	6a3a      	ldr	r2, [r7, #32]
 8001904:	e841 2300 	strex	r3, r2, [r1]
 8001908:	61bb      	str	r3, [r7, #24]
   return(result);
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e5      	bne.n	80018dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e00f      	b.n	800194c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4013      	ands	r3, r2
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	429a      	cmp	r2, r3
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	429a      	cmp	r2, r3
 8001948:	d09f      	beq.n	800188a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3740      	adds	r7, #64	@ 0x40
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001954:	b480      	push	{r7}
 8001956:	b095      	sub	sp, #84	@ 0x54
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	330c      	adds	r3, #12
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001966:	e853 3f00 	ldrex	r3, [r3]
 800196a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800196c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800196e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	330c      	adds	r3, #12
 800197a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800197c:	643a      	str	r2, [r7, #64]	@ 0x40
 800197e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001980:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001982:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001984:	e841 2300 	strex	r3, r2, [r1]
 8001988:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800198a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e5      	bne.n	800195c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3314      	adds	r3, #20
 8001996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	e853 3f00 	ldrex	r3, [r3]
 800199e:	61fb      	str	r3, [r7, #28]
   return(result);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3314      	adds	r3, #20
 80019ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019b8:	e841 2300 	strex	r3, r2, [r1]
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e5      	bne.n	8001990 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d119      	bne.n	8001a00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	330c      	adds	r3, #12
 80019d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	e853 3f00 	ldrex	r3, [r3]
 80019da:	60bb      	str	r3, [r7, #8]
   return(result);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f023 0310 	bic.w	r3, r3, #16
 80019e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	330c      	adds	r3, #12
 80019ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019ec:	61ba      	str	r2, [r7, #24]
 80019ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019f0:	6979      	ldr	r1, [r7, #20]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	e841 2300 	strex	r3, r2, [r1]
 80019f8:	613b      	str	r3, [r7, #16]
   return(result);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e5      	bne.n	80019cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001a0e:	bf00      	nop
 8001a10:	3754      	adds	r7, #84	@ 0x54
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f7ff ff0c 	bl	8001850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b21      	cmp	r3, #33	@ 0x21
 8001a52:	d13e      	bne.n	8001ad2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a5c:	d114      	bne.n	8001a88 <UART_Transmit_IT+0x48>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d110      	bne.n	8001a88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	1c9a      	adds	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	621a      	str	r2, [r3, #32]
 8001a86:	e008      	b.n	8001a9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	1c59      	adds	r1, r3, #1
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6211      	str	r1, [r2, #32]
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001abc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001acc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001ad2:	2302      	movs	r3, #2
  }
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fe94 	bl	800182c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b08c      	sub	sp, #48	@ 0x30
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b22      	cmp	r3, #34	@ 0x22
 8001b20:	f040 80ae 	bne.w	8001c80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b2c:	d117      	bne.n	8001b5e <UART_Receive_IT+0x50>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d113      	bne.n	8001b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	1c9a      	adds	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b5c:	e026      	b.n	8001bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b70:	d007      	beq.n	8001b82 <UART_Receive_IT+0x74>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <UART_Receive_IT+0x82>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e008      	b.n	8001ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d15d      	bne.n	8001c7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0220 	bic.w	r2, r2, #32
 8001bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d135      	bne.n	8001c72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	330c      	adds	r3, #12
 8001c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	e853 3f00 	ldrex	r3, [r3]
 8001c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f023 0310 	bic.w	r3, r3, #16
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c2c:	623a      	str	r2, [r7, #32]
 8001c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c30:	69f9      	ldr	r1, [r7, #28]
 8001c32:	6a3a      	ldr	r2, [r7, #32]
 8001c34:	e841 2300 	strex	r3, r2, [r1]
 8001c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e5      	bne.n	8001c0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d10a      	bne.n	8001c64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fdf9 	bl	8001862 <HAL_UARTEx_RxEventCallback>
 8001c70:	e002      	b.n	8001c78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fde3 	bl	800183e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e002      	b.n	8001c82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e000      	b.n	8001c82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3730      	adds	r7, #48	@ 0x30
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001cc6:	f023 030c 	bic.w	r3, r3, #12
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a2c      	ldr	r2, [pc, #176]	@ (8001da0 <UART_SetConfig+0x114>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d103      	bne.n	8001cfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cf4:	f7ff fa02 	bl	80010fc <HAL_RCC_GetPCLK2Freq>
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	e002      	b.n	8001d02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cfc:	f7ff f9ea 	bl	80010d4 <HAL_RCC_GetPCLK1Freq>
 8001d00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009a      	lsls	r2, r3, #2
 8001d0c:	441a      	add	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	4a22      	ldr	r2, [pc, #136]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	0119      	lsls	r1, r3, #4
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	009a      	lsls	r2, r3, #2
 8001d2c:	441a      	add	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2064      	movs	r0, #100	@ 0x64
 8001d42:	fb00 f303 	mul.w	r3, r0, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	3332      	adds	r3, #50	@ 0x32
 8001d4c:	4a15      	ldr	r2, [pc, #84]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d58:	4419      	add	r1, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009a      	lsls	r2, r3, #2
 8001d64:	441a      	add	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d72:	fba3 0302 	umull	r0, r3, r3, r2
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2064      	movs	r0, #100	@ 0x64
 8001d7a:	fb00 f303 	mul.w	r3, r0, r3
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	3332      	adds	r3, #50	@ 0x32
 8001d84:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	440a      	add	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013800 	.word	0x40013800
 8001da4:	51eb851f 	.word	0x51eb851f

08001da8 <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void LED_OnOff(uint16_t led, int delay);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_8) {
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001db8:	d108      	bne.n	8001dcc <HAL_GPIO_EXTI_Callback+0x24>
		HAL_UART_Transmit(&huart2, (uint8_t*) Message1, MESSAGESIZE1, 0xff);
 8001dba:	23ff      	movs	r3, #255	@ 0xff
 8001dbc:	2213      	movs	r2, #19
 8001dbe:	4918      	ldr	r1, [pc, #96]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x78>)
 8001dc0:	4818      	ldr	r0, [pc, #96]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001dc2:	f7ff fa1d 	bl	8001200 <HAL_UART_Transmit>
		flag1 = 1;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <HAL_GPIO_EXTI_Callback+0x80>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
		/*flag2 = 0;
		 flag3 = 0;
		 flag4 = 0;*/
	}
	if (GPIO_Pin == GPIO_PIN_4) {
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d108      	bne.n	8001de4 <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_UART_Transmit(&huart2, (uint8_t*) Message2, MESSAGESIZE2, 0xff);
 8001dd2:	23ff      	movs	r3, #255	@ 0xff
 8001dd4:	2213      	movs	r2, #19
 8001dd6:	4915      	ldr	r1, [pc, #84]	@ (8001e2c <HAL_GPIO_EXTI_Callback+0x84>)
 8001dd8:	4812      	ldr	r0, [pc, #72]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001dda:	f7ff fa11 	bl	8001200 <HAL_UART_Transmit>
		//flag1 = 0;
		flag2 = 1;
 8001dde:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <HAL_GPIO_EXTI_Callback+0x88>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
		/*flag3 = 0;
		 flag4 = 0;*/
	}
	if (GPIO_Pin == GPIO_PIN_5) {
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d108      	bne.n	8001dfc <HAL_GPIO_EXTI_Callback+0x54>
		HAL_UART_Transmit(&huart2, (uint8_t*) Message3, MESSAGESIZE3, 0xff);
 8001dea:	23ff      	movs	r3, #255	@ 0xff
 8001dec:	2213      	movs	r2, #19
 8001dee:	4911      	ldr	r1, [pc, #68]	@ (8001e34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001df2:	f7ff fa05 	bl	8001200 <HAL_UART_Transmit>
		//flag1 = 0;
		//flag2 = 0;
		flag3 = 1;
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_GPIO_EXTI_Callback+0x90>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
		//flag4 = 0;
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e02:	d108      	bne.n	8001e16 <HAL_GPIO_EXTI_Callback+0x6e>
		HAL_UART_Transmit(&huart2, (uint8_t*) Message4, MESSAGESIZE4, 0xff);
 8001e04:	23ff      	movs	r3, #255	@ 0xff
 8001e06:	2213      	movs	r2, #19
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <HAL_GPIO_EXTI_Callback+0x94>)
 8001e0a:	4806      	ldr	r0, [pc, #24]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001e0c:	f7ff f9f8 	bl	8001200 <HAL_UART_Transmit>
		/*flag1 = 0;
		 flag2 = 0;
		 flag3 = 0;*/
		flag4 = 1;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_GPIO_EXTI_Callback+0x98>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
	}
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000018 	.word	0x20000018
 8001e24:	2000009c 	.word	0x2000009c
 8001e28:	2000008c 	.word	0x2000008c
 8001e2c:	2000002c 	.word	0x2000002c
 8001e30:	20000090 	.word	0x20000090
 8001e34:	20000040 	.word	0x20000040
 8001e38:	20000094 	.word	0x20000094
 8001e3c:	20000054 	.word	0x20000054
 8001e40:	20000098 	.word	0x20000098

08001e44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	uint16_t led = 0x00;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	80fb      	strh	r3, [r7, #6]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e4e:	f7fe f97d 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e52:	f000 f85f 	bl	8001f14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e56:	f000 f8c9 	bl	8001fec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001e5a:	f000 f89d 	bl	8001f98 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	LED_OnOff(0xff, 500);
 8001e5e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e62:	20ff      	movs	r0, #255	@ 0xff
 8001e64:	f000 f966 	bl	8002134 <LED_OnOff>
	HAL_UART_Transmit(&huart2, (uint8_t*) Message, MESSAGESIZE, 0xff);
 8001e68:	23ff      	movs	r3, #255	@ 0xff
 8001e6a:	220d      	movs	r2, #13
 8001e6c:	4923      	ldr	r1, [pc, #140]	@ (8001efc <main+0xb8>)
 8001e6e:	4824      	ldr	r0, [pc, #144]	@ (8001f00 <main+0xbc>)
 8001e70:	f7ff f9c6 	bl	8001200 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		led = 0x00;
 8001e74:	2300      	movs	r3, #0
 8001e76:	80fb      	strh	r3, [r7, #6]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (flag1 == 1) {
 8001e78:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <main+0xc0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10b      	bne.n	8001e98 <main+0x54>
			led = led | 0x03;
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	f043 0303 	orr.w	r3, r3, #3
 8001e86:	80fb      	strh	r3, [r7, #6]
			LED_OnOff(led, 100);
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	2164      	movs	r1, #100	@ 0x64
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 f951 	bl	8002134 <LED_OnOff>
			flag1 = 0;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <main+0xc0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
		}
		if (flag2 == 1) {
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <main+0xc4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10b      	bne.n	8001eb8 <main+0x74>
			led = led | 0x0c;
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	f043 030c 	orr.w	r3, r3, #12
 8001ea6:	80fb      	strh	r3, [r7, #6]
			LED_OnOff(led, 100);
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	2164      	movs	r1, #100	@ 0x64
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 f941 	bl	8002134 <LED_OnOff>
			flag2 = 0;
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <main+0xc4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
		}
		if (flag3 == 1) {
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <main+0xc8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d10b      	bne.n	8001ed8 <main+0x94>
			led = led | 0x30;
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001ec6:	80fb      	strh	r3, [r7, #6]
			LED_OnOff(led, 100);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	2164      	movs	r1, #100	@ 0x64
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f931 	bl	8002134 <LED_OnOff>
			flag3 = 0;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <main+0xc8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
		}
		if (flag4 == 1) {
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <main+0xcc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d1c9      	bne.n	8001e74 <main+0x30>
			led = led | 0xc0;
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ee6:	80fb      	strh	r3, [r7, #6]
			LED_OnOff(led, 100);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	2164      	movs	r1, #100	@ 0x64
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f921 	bl	8002134 <LED_OnOff>
			flag4 = 0;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <main+0xcc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
		led = 0x00;
 8001ef8:	e7bc      	b.n	8001e74 <main+0x30>
 8001efa:	bf00      	nop
 8001efc:	20000008 	.word	0x20000008
 8001f00:	2000009c 	.word	0x2000009c
 8001f04:	2000008c 	.word	0x2000008c
 8001f08:	20000090 	.word	0x20000090
 8001f0c:	20000094 	.word	0x20000094
 8001f10:	20000098 	.word	0x20000098

08001f14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b090      	sub	sp, #64	@ 0x40
 8001f18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f1a:	f107 0318 	add.w	r3, r7, #24
 8001f1e:	2228      	movs	r2, #40	@ 0x28
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fa1f 	bl	8002366 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3e:	2310      	movs	r3, #16
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f42:	2302      	movs	r3, #2
 8001f44:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f46:	2300      	movs	r3, #0
 8001f48:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001f4a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fcf3 	bl	8000940 <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x50>
		Error_Handler();
 8001f60:	f000 f904 	bl	800216c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f74:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe ff60 	bl	8000e44 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0x7a>
		Error_Handler();
 8001f8a:	f000 f8ef 	bl	800216c <Error_Handler>
	}
}
 8001f8e:	bf00      	nop
 8001f90:	3740      	adds	r7, #64	@ 0x40
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <MX_USART2_UART_Init+0x50>)
 8001fa0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fa8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001fce:	4805      	ldr	r0, [pc, #20]	@ (8001fe4 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	f7ff f8c6 	bl	8001160 <HAL_UART_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001fda:	f000 f8c7 	bl	800216c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000009c 	.word	0x2000009c
 8001fe8:	40004400 	.word	0x40004400

08001fec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002000:	4b46      	ldr	r3, [pc, #280]	@ (800211c <MX_GPIO_Init+0x130>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a45      	ldr	r2, [pc, #276]	@ (800211c <MX_GPIO_Init+0x130>)
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b43      	ldr	r3, [pc, #268]	@ (800211c <MX_GPIO_Init+0x130>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b40      	ldr	r3, [pc, #256]	@ (800211c <MX_GPIO_Init+0x130>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a3f      	ldr	r2, [pc, #252]	@ (800211c <MX_GPIO_Init+0x130>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <MX_GPIO_Init+0x130>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002030:	4b3a      	ldr	r3, [pc, #232]	@ (800211c <MX_GPIO_Init+0x130>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a39      	ldr	r2, [pc, #228]	@ (800211c <MX_GPIO_Init+0x130>)
 8002036:	f043 0308 	orr.w	r3, r3, #8
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b37      	ldr	r3, [pc, #220]	@ (800211c <MX_GPIO_Init+0x130>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8002048:	2200      	movs	r2, #0
 800204a:	21ff      	movs	r1, #255	@ 0xff
 800204c:	4834      	ldr	r0, [pc, #208]	@ (8002120 <MX_GPIO_Init+0x134>)
 800204e:	f7fe fc47 	bl	80008e0 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2120      	movs	r1, #32
 8002056:	4833      	ldr	r0, [pc, #204]	@ (8002124 <MX_GPIO_Init+0x138>)
 8002058:	f7fe fc42 	bl	80008e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800205c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002060:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002062:	4b31      	ldr	r3, [pc, #196]	@ (8002128 <MX_GPIO_Init+0x13c>)
 8002064:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 0310 	add.w	r3, r7, #16
 800206e:	4619      	mov	r1, r3
 8002070:	482b      	ldr	r0, [pc, #172]	@ (8002120 <MX_GPIO_Init+0x134>)
 8002072:	f7fe fab1 	bl	80005d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 PC2 PC3
	 PC4 PC5 PC6 PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8002076:	23ff      	movs	r3, #255	@ 0xff
 8002078:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2302      	movs	r3, #2
 8002084:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4619      	mov	r1, r3
 800208c:	4824      	ldr	r0, [pc, #144]	@ (8002120 <MX_GPIO_Init+0x134>)
 800208e:	f7fe faa3 	bl	80005d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002092:	2320      	movs	r3, #32
 8002094:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	2301      	movs	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2302      	movs	r3, #2
 80020a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	481e      	ldr	r0, [pc, #120]	@ (8002124 <MX_GPIO_Init+0x138>)
 80020aa:	f7fe fa95 	bl	80005d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_4 | GPIO_PIN_5;
 80020ae:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80020b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <MX_GPIO_Init+0x140>)
 80020b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	4619      	mov	r1, r3
 80020c2:	481b      	ldr	r0, [pc, #108]	@ (8002130 <MX_GPIO_Init+0x144>)
 80020c4:	f7fe fa88 	bl	80005d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <MX_GPIO_Init+0x140>)
 80020d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4619      	mov	r1, r3
 80020dc:	4811      	ldr	r0, [pc, #68]	@ (8002124 <MX_GPIO_Init+0x138>)
 80020de:	f7fe fa7b 	bl	80005d8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	200a      	movs	r0, #10
 80020e8:	f7fe f98d 	bl	8000406 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020ec:	200a      	movs	r0, #10
 80020ee:	f7fe f9a6 	bl	800043e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	2017      	movs	r0, #23
 80020f8:	f7fe f985 	bl	8000406 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020fc:	2017      	movs	r0, #23
 80020fe:	f7fe f99e 	bl	800043e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	2028      	movs	r0, #40	@ 0x28
 8002108:	f7fe f97d 	bl	8000406 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800210c:	2028      	movs	r0, #40	@ 0x28
 800210e:	f7fe f996 	bl	800043e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002112:	bf00      	nop
 8002114:	3720      	adds	r7, #32
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	40011000 	.word	0x40011000
 8002124:	40010800 	.word	0x40010800
 8002128:	10110000 	.word	0x10110000
 800212c:	10210000 	.word	0x10210000
 8002130:	40010c00 	.word	0x40010c00

08002134 <LED_OnOff>:

/* USER CODE BEGIN 4 */
void LED_OnOff(uint16_t led, int delay) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, led, GPIO_PIN_SET);
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	2201      	movs	r2, #1
 8002144:	4619      	mov	r1, r3
 8002146:	4808      	ldr	r0, [pc, #32]	@ (8002168 <LED_OnOff+0x34>)
 8002148:	f7fe fbca 	bl	80008e0 <HAL_GPIO_WritePin>
	HAL_Delay(delay);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f85e 	bl	8000210 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, led, GPIO_PIN_RESET);
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	2200      	movs	r2, #0
 8002158:	4619      	mov	r1, r3
 800215a:	4803      	ldr	r0, [pc, #12]	@ (8002168 <LED_OnOff+0x34>)
 800215c:	f7fe fbc0 	bl	80008e0 <HAL_GPIO_WritePin>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40011000 	.word	0x40011000

0800216c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
}
 8002172:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <Error_Handler+0x8>

08002178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_MspInit+0x5c>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <HAL_MspInit+0x5c>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6193      	str	r3, [r2, #24]
 800218a:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_MspInit+0x5c>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <HAL_MspInit+0x5c>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a0e      	ldr	r2, [pc, #56]	@ (80021d4 <HAL_MspInit+0x5c>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <HAL_MspInit+0x5c>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_MspInit+0x60>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_MspInit+0x60>)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010000 	.word	0x40010000

080021dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_UART_MspInit+0x80>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d12b      	bne.n	8002254 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021fc:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_UART_MspInit+0x84>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <HAL_UART_MspInit+0x84>)
 8002202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002206:	61d3      	str	r3, [r2, #28]
 8002208:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_UART_MspInit+0x84>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_UART_MspInit+0x84>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a11      	ldr	r2, [pc, #68]	@ (8002260 <HAL_UART_MspInit+0x84>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <HAL_UART_MspInit+0x84>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800222c:	230c      	movs	r3, #12
 800222e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2302      	movs	r3, #2
 8002236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4619      	mov	r1, r3
 800223e:	4809      	ldr	r0, [pc, #36]	@ (8002264 <HAL_UART_MspInit+0x88>)
 8002240:	f7fe f9ca 	bl	80005d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2026      	movs	r0, #38	@ 0x26
 800224a:	f7fe f8dc 	bl	8000406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800224e:	2026      	movs	r0, #38	@ 0x26
 8002250:	f7fe f8f5 	bl	800043e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002254:	bf00      	nop
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40004400 	.word	0x40004400
 8002260:	40021000 	.word	0x40021000
 8002264:	40010800 	.word	0x40010800

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <NMI_Handler+0x4>

08002270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <HardFault_Handler+0x4>

08002278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <MemManage_Handler+0x4>

08002280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <UsageFault_Handler+0x4>

08002290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b8:	f7fd ff8e 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80022c4:	2010      	movs	r0, #16
 80022c6:	f7fe fb23 	bl	8000910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}

080022ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80022d2:	2020      	movs	r0, #32
 80022d4:	f7fe fb1c 	bl	8000910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80022d8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80022dc:	f7fe fb18 	bl	8000910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <USART2_IRQHandler+0x10>)
 80022ea:	f7ff f80d 	bl	8001308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000009c 	.word	0x2000009c

080022f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80022fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002300:	f7fe fb06 	bl	8000910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002304:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002308:	f7fe fb02 	bl	8000910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800231c:	f7ff fff8 	bl	8002310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	@ (8002350 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002322:	490c      	ldr	r1, [pc, #48]	@ (8002354 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002324:	4a0c      	ldr	r2, [pc, #48]	@ (8002358 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a09      	ldr	r2, [pc, #36]	@ (800235c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002338:	4c09      	ldr	r4, [pc, #36]	@ (8002360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002346:	f000 f817 	bl	8002378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800234a:	f7ff fd7b 	bl	8001e44 <main>
  bx lr
 800234e:	4770      	bx	lr
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002358:	0800240c 	.word	0x0800240c
  ldr r2, =_sbss
 800235c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002360:	200000e4 	.word	0x200000e4

08002364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC1_2_IRQHandler>

08002366 <memset>:
 8002366:	4603      	mov	r3, r0
 8002368:	4402      	add	r2, r0
 800236a:	4293      	cmp	r3, r2
 800236c:	d100      	bne.n	8002370 <memset+0xa>
 800236e:	4770      	bx	lr
 8002370:	f803 1b01 	strb.w	r1, [r3], #1
 8002374:	e7f9      	b.n	800236a <memset+0x4>
	...

08002378 <__libc_init_array>:
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	2600      	movs	r6, #0
 800237c:	4d0c      	ldr	r5, [pc, #48]	@ (80023b0 <__libc_init_array+0x38>)
 800237e:	4c0d      	ldr	r4, [pc, #52]	@ (80023b4 <__libc_init_array+0x3c>)
 8002380:	1b64      	subs	r4, r4, r5
 8002382:	10a4      	asrs	r4, r4, #2
 8002384:	42a6      	cmp	r6, r4
 8002386:	d109      	bne.n	800239c <__libc_init_array+0x24>
 8002388:	f000 f81a 	bl	80023c0 <_init>
 800238c:	2600      	movs	r6, #0
 800238e:	4d0a      	ldr	r5, [pc, #40]	@ (80023b8 <__libc_init_array+0x40>)
 8002390:	4c0a      	ldr	r4, [pc, #40]	@ (80023bc <__libc_init_array+0x44>)
 8002392:	1b64      	subs	r4, r4, r5
 8002394:	10a4      	asrs	r4, r4, #2
 8002396:	42a6      	cmp	r6, r4
 8002398:	d105      	bne.n	80023a6 <__libc_init_array+0x2e>
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a0:	4798      	blx	r3
 80023a2:	3601      	adds	r6, #1
 80023a4:	e7ee      	b.n	8002384 <__libc_init_array+0xc>
 80023a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023aa:	4798      	blx	r3
 80023ac:	3601      	adds	r6, #1
 80023ae:	e7f2      	b.n	8002396 <__libc_init_array+0x1e>
 80023b0:	08002404 	.word	0x08002404
 80023b4:	08002404 	.word	0x08002404
 80023b8:	08002404 	.word	0x08002404
 80023bc:	08002408 	.word	0x08002408

080023c0 <_init>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	bf00      	nop
 80023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c6:	bc08      	pop	{r3}
 80023c8:	469e      	mov	lr, r3
 80023ca:	4770      	bx	lr

080023cc <_fini>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	bf00      	nop
 80023d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d2:	bc08      	pop	{r3}
 80023d4:	469e      	mov	lr, r3
 80023d6:	4770      	bx	lr
