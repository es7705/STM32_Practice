
TIM3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080022e8  080022e8  000032e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800230c  0800230c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800230c  0800230c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800230c  0800230c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800230c  0800230c  0000330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002310  08002310  00003310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002314  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002320  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002320  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d1c  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015df  00000000  00000000  0000bd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0000d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000729  00000000  00000000  0000dc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001663b  00000000  00000000  0000e3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009992  00000000  00000000  000249dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841a7  00000000  00000000  0002e36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000b2558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000b4b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022d0 	.word	0x080022d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080022d0 	.word	0x080022d0

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	@ (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	@ (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 ffcc 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	@ (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	@ (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	@ (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	@ (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	@ (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	@ (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	@ (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	@ (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	@ 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	@ 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	@ (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	b480      	push	{r7}
 800042e:	b08b      	sub	sp, #44	@ 0x2c
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800043e:	e169      	b.n	8000714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8158 	bne.w	800070e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	4a9a      	ldr	r2, [pc, #616]	@ (80006cc <HAL_GPIO_Init+0x2a0>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d05e      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 8000468:	4a98      	ldr	r2, [pc, #608]	@ (80006cc <HAL_GPIO_Init+0x2a0>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d875      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 800046e:	4a98      	ldr	r2, [pc, #608]	@ (80006d0 <HAL_GPIO_Init+0x2a4>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d058      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 8000474:	4a96      	ldr	r2, [pc, #600]	@ (80006d0 <HAL_GPIO_Init+0x2a4>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d86f      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 800047a:	4a96      	ldr	r2, [pc, #600]	@ (80006d4 <HAL_GPIO_Init+0x2a8>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d052      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 8000480:	4a94      	ldr	r2, [pc, #592]	@ (80006d4 <HAL_GPIO_Init+0x2a8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d869      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 8000486:	4a94      	ldr	r2, [pc, #592]	@ (80006d8 <HAL_GPIO_Init+0x2ac>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d04c      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 800048c:	4a92      	ldr	r2, [pc, #584]	@ (80006d8 <HAL_GPIO_Init+0x2ac>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d863      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 8000492:	4a92      	ldr	r2, [pc, #584]	@ (80006dc <HAL_GPIO_Init+0x2b0>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d046      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 8000498:	4a90      	ldr	r2, [pc, #576]	@ (80006dc <HAL_GPIO_Init+0x2b0>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d85d      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 800049e:	2b12      	cmp	r3, #18
 80004a0:	d82a      	bhi.n	80004f8 <HAL_GPIO_Init+0xcc>
 80004a2:	2b12      	cmp	r3, #18
 80004a4:	d859      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 80004a6:	a201      	add	r2, pc, #4	@ (adr r2, 80004ac <HAL_GPIO_Init+0x80>)
 80004a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ac:	08000527 	.word	0x08000527
 80004b0:	08000501 	.word	0x08000501
 80004b4:	08000513 	.word	0x08000513
 80004b8:	08000555 	.word	0x08000555
 80004bc:	0800055b 	.word	0x0800055b
 80004c0:	0800055b 	.word	0x0800055b
 80004c4:	0800055b 	.word	0x0800055b
 80004c8:	0800055b 	.word	0x0800055b
 80004cc:	0800055b 	.word	0x0800055b
 80004d0:	0800055b 	.word	0x0800055b
 80004d4:	0800055b 	.word	0x0800055b
 80004d8:	0800055b 	.word	0x0800055b
 80004dc:	0800055b 	.word	0x0800055b
 80004e0:	0800055b 	.word	0x0800055b
 80004e4:	0800055b 	.word	0x0800055b
 80004e8:	0800055b 	.word	0x0800055b
 80004ec:	0800055b 	.word	0x0800055b
 80004f0:	08000509 	.word	0x08000509
 80004f4:	0800051d 	.word	0x0800051d
 80004f8:	4a79      	ldr	r2, [pc, #484]	@ (80006e0 <HAL_GPIO_Init+0x2b4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d013      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004fe:	e02c      	b.n	800055a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	623b      	str	r3, [r7, #32]
          break;
 8000506:	e029      	b.n	800055c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	3304      	adds	r3, #4
 800050e:	623b      	str	r3, [r7, #32]
          break;
 8000510:	e024      	b.n	800055c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	3308      	adds	r3, #8
 8000518:	623b      	str	r3, [r7, #32]
          break;
 800051a:	e01f      	b.n	800055c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	330c      	adds	r3, #12
 8000522:	623b      	str	r3, [r7, #32]
          break;
 8000524:	e01a      	b.n	800055c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800052e:	2304      	movs	r3, #4
 8000530:	623b      	str	r3, [r7, #32]
          break;
 8000532:	e013      	b.n	800055c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d105      	bne.n	8000548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800053c:	2308      	movs	r3, #8
 800053e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	611a      	str	r2, [r3, #16]
          break;
 8000546:	e009      	b.n	800055c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000548:	2308      	movs	r3, #8
 800054a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	69fa      	ldr	r2, [r7, #28]
 8000550:	615a      	str	r2, [r3, #20]
          break;
 8000552:	e003      	b.n	800055c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
          break;
 8000558:	e000      	b.n	800055c <HAL_GPIO_Init+0x130>
          break;
 800055a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	2bff      	cmp	r3, #255	@ 0xff
 8000560:	d801      	bhi.n	8000566 <HAL_GPIO_Init+0x13a>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	e001      	b.n	800056a <HAL_GPIO_Init+0x13e>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3304      	adds	r3, #4
 800056a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	2bff      	cmp	r3, #255	@ 0xff
 8000570:	d802      	bhi.n	8000578 <HAL_GPIO_Init+0x14c>
 8000572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	e002      	b.n	800057e <HAL_GPIO_Init+0x152>
 8000578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057a:	3b08      	subs	r3, #8
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	210f      	movs	r1, #15
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	401a      	ands	r2, r3
 8000590:	6a39      	ldr	r1, [r7, #32]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	431a      	orrs	r2, r3
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f000 80b1 	beq.w	800070e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005ac:	4b4d      	ldr	r3, [pc, #308]	@ (80006e4 <HAL_GPIO_Init+0x2b8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a4c      	ldr	r2, [pc, #304]	@ (80006e4 <HAL_GPIO_Init+0x2b8>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <HAL_GPIO_Init+0x2b8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005c4:	4a48      	ldr	r2, [pc, #288]	@ (80006e8 <HAL_GPIO_Init+0x2bc>)
 80005c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c8:	089b      	lsrs	r3, r3, #2
 80005ca:	3302      	adds	r3, #2
 80005cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	220f      	movs	r2, #15
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4013      	ands	r3, r2
 80005e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a40      	ldr	r2, [pc, #256]	@ (80006ec <HAL_GPIO_Init+0x2c0>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d013      	beq.n	8000618 <HAL_GPIO_Init+0x1ec>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a3f      	ldr	r2, [pc, #252]	@ (80006f0 <HAL_GPIO_Init+0x2c4>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d00d      	beq.n	8000614 <HAL_GPIO_Init+0x1e8>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a3e      	ldr	r2, [pc, #248]	@ (80006f4 <HAL_GPIO_Init+0x2c8>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d007      	beq.n	8000610 <HAL_GPIO_Init+0x1e4>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a3d      	ldr	r2, [pc, #244]	@ (80006f8 <HAL_GPIO_Init+0x2cc>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d101      	bne.n	800060c <HAL_GPIO_Init+0x1e0>
 8000608:	2303      	movs	r3, #3
 800060a:	e006      	b.n	800061a <HAL_GPIO_Init+0x1ee>
 800060c:	2304      	movs	r3, #4
 800060e:	e004      	b.n	800061a <HAL_GPIO_Init+0x1ee>
 8000610:	2302      	movs	r3, #2
 8000612:	e002      	b.n	800061a <HAL_GPIO_Init+0x1ee>
 8000614:	2301      	movs	r3, #1
 8000616:	e000      	b.n	800061a <HAL_GPIO_Init+0x1ee>
 8000618:	2300      	movs	r3, #0
 800061a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800061c:	f002 0203 	and.w	r2, r2, #3
 8000620:	0092      	lsls	r2, r2, #2
 8000622:	4093      	lsls	r3, r2
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4313      	orrs	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800062a:	492f      	ldr	r1, [pc, #188]	@ (80006e8 <HAL_GPIO_Init+0x2bc>)
 800062c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	3302      	adds	r3, #2
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d006      	beq.n	8000652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	492c      	ldr	r1, [pc, #176]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	4313      	orrs	r3, r2
 800064e:	608b      	str	r3, [r1, #8]
 8000650:	e006      	b.n	8000660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000652:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	43db      	mvns	r3, r3
 800065a:	4928      	ldr	r1, [pc, #160]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 800065c:	4013      	ands	r3, r2
 800065e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000668:	2b00      	cmp	r3, #0
 800066a:	d006      	beq.n	800067a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	4922      	ldr	r1, [pc, #136]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	4313      	orrs	r3, r2
 8000676:	60cb      	str	r3, [r1, #12]
 8000678:	e006      	b.n	8000688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 800067c:	68da      	ldr	r2, [r3, #12]
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	43db      	mvns	r3, r3
 8000682:	491e      	ldr	r1, [pc, #120]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 8000684:	4013      	ands	r3, r2
 8000686:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d006      	beq.n	80006a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	4918      	ldr	r1, [pc, #96]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	4313      	orrs	r3, r2
 800069e:	604b      	str	r3, [r1, #4]
 80006a0:	e006      	b.n	80006b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4914      	ldr	r1, [pc, #80]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d021      	beq.n	8000700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	490e      	ldr	r1, [pc, #56]	@ (80006fc <HAL_GPIO_Init+0x2d0>)
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	600b      	str	r3, [r1, #0]
 80006c8:	e021      	b.n	800070e <HAL_GPIO_Init+0x2e2>
 80006ca:	bf00      	nop
 80006cc:	10320000 	.word	0x10320000
 80006d0:	10310000 	.word	0x10310000
 80006d4:	10220000 	.word	0x10220000
 80006d8:	10210000 	.word	0x10210000
 80006dc:	10120000 	.word	0x10120000
 80006e0:	10110000 	.word	0x10110000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010000 	.word	0x40010000
 80006ec:	40010800 	.word	0x40010800
 80006f0:	40010c00 	.word	0x40010c00
 80006f4:	40011000 	.word	0x40011000
 80006f8:	40011400 	.word	0x40011400
 80006fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000700:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <HAL_GPIO_Init+0x304>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	43db      	mvns	r3, r3
 8000708:	4909      	ldr	r1, [pc, #36]	@ (8000730 <HAL_GPIO_Init+0x304>)
 800070a:	4013      	ands	r3, r2
 800070c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800070e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000710:	3301      	adds	r3, #1
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071a:	fa22 f303 	lsr.w	r3, r2, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	f47f ae8e 	bne.w	8000440 <HAL_GPIO_Init+0x14>
  }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	372c      	adds	r7, #44	@ 0x2c
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40010400 	.word	0x40010400

08000734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	807b      	strh	r3, [r7, #2]
 8000740:	4613      	mov	r3, r2
 8000742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000744:	787b      	ldrb	r3, [r7, #1]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800074a:	887a      	ldrh	r2, [r7, #2]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000750:	e003      	b.n	800075a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	041a      	lsls	r2, r3, #16
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	611a      	str	r2, [r3, #16]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	4013      	ands	r3, r2
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800077a:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f806 	bl	8000794 <HAL_GPIO_EXTI_Callback>
  }
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e272      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f000 8087 	beq.w	80008d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007c8:	4b92      	ldr	r3, [pc, #584]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f003 030c 	and.w	r3, r3, #12
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d00c      	beq.n	80007ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007d4:	4b8f      	ldr	r3, [pc, #572]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 030c 	and.w	r3, r3, #12
 80007dc:	2b08      	cmp	r3, #8
 80007de:	d112      	bne.n	8000806 <HAL_RCC_OscConfig+0x5e>
 80007e0:	4b8c      	ldr	r3, [pc, #560]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80007ec:	d10b      	bne.n	8000806 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ee:	4b89      	ldr	r3, [pc, #548]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d06c      	beq.n	80008d4 <HAL_RCC_OscConfig+0x12c>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d168      	bne.n	80008d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e24c      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800080e:	d106      	bne.n	800081e <HAL_RCC_OscConfig+0x76>
 8000810:	4b80      	ldr	r3, [pc, #512]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a7f      	ldr	r2, [pc, #508]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e02e      	b.n	800087c <HAL_RCC_OscConfig+0xd4>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10c      	bne.n	8000840 <HAL_RCC_OscConfig+0x98>
 8000826:	4b7b      	ldr	r3, [pc, #492]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a7a      	ldr	r2, [pc, #488]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800082c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	4b78      	ldr	r3, [pc, #480]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a77      	ldr	r2, [pc, #476]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000838:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e01d      	b.n	800087c <HAL_RCC_OscConfig+0xd4>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000848:	d10c      	bne.n	8000864 <HAL_RCC_OscConfig+0xbc>
 800084a:	4b72      	ldr	r3, [pc, #456]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a71      	ldr	r2, [pc, #452]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b6f      	ldr	r3, [pc, #444]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a6e      	ldr	r2, [pc, #440]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800085c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	e00b      	b.n	800087c <HAL_RCC_OscConfig+0xd4>
 8000864:	4b6b      	ldr	r3, [pc, #428]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a6a      	ldr	r2, [pc, #424]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800086a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b68      	ldr	r3, [pc, #416]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a67      	ldr	r2, [pc, #412]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800087a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000884:	f7ff fcba 	bl	80001fc <HAL_GetTick>
 8000888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088a:	e008      	b.n	800089e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800088c:	f7ff fcb6 	bl	80001fc <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	2b64      	cmp	r3, #100	@ 0x64
 8000898:	d901      	bls.n	800089e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800089a:	2303      	movs	r3, #3
 800089c:	e200      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089e:	4b5d      	ldr	r3, [pc, #372]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f0      	beq.n	800088c <HAL_RCC_OscConfig+0xe4>
 80008aa:	e014      	b.n	80008d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ac:	f7ff fca6 	bl	80001fc <HAL_GetTick>
 80008b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b2:	e008      	b.n	80008c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008b4:	f7ff fca2 	bl	80001fc <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	2b64      	cmp	r3, #100	@ 0x64
 80008c0:	d901      	bls.n	80008c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008c2:	2303      	movs	r3, #3
 80008c4:	e1ec      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c6:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f0      	bne.n	80008b4 <HAL_RCC_OscConfig+0x10c>
 80008d2:	e000      	b.n	80008d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d063      	beq.n	80009aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 030c 	and.w	r3, r3, #12
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00b      	beq.n	8000906 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ee:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d11c      	bne.n	8000934 <HAL_RCC_OscConfig+0x18c>
 80008fa:	4b46      	ldr	r3, [pc, #280]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d116      	bne.n	8000934 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000906:	4b43      	ldr	r3, [pc, #268]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <HAL_RCC_OscConfig+0x176>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d001      	beq.n	800091e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e1c0      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800091e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4939      	ldr	r1, [pc, #228]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800092e:	4313      	orrs	r3, r2
 8000930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000932:	e03a      	b.n	80009aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	691b      	ldr	r3, [r3, #16]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d020      	beq.n	800097e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800093c:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <HAL_RCC_OscConfig+0x270>)
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000942:	f7ff fc5b 	bl	80001fc <HAL_GetTick>
 8000946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000948:	e008      	b.n	800095c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800094a:	f7ff fc57 	bl	80001fc <HAL_GetTick>
 800094e:	4602      	mov	r2, r0
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	2b02      	cmp	r3, #2
 8000956:	d901      	bls.n	800095c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000958:	2303      	movs	r3, #3
 800095a:	e1a1      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800095c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f0      	beq.n	800094a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4927      	ldr	r1, [pc, #156]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000978:	4313      	orrs	r3, r2
 800097a:	600b      	str	r3, [r1, #0]
 800097c:	e015      	b.n	80009aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <HAL_RCC_OscConfig+0x270>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000984:	f7ff fc3a 	bl	80001fc <HAL_GetTick>
 8000988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098a:	e008      	b.n	800099e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800098c:	f7ff fc36 	bl	80001fc <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	2b02      	cmp	r3, #2
 8000998:	d901      	bls.n	800099e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800099a:	2303      	movs	r3, #3
 800099c:	e180      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1f0      	bne.n	800098c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d03a      	beq.n	8000a2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d019      	beq.n	80009f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <HAL_RCC_OscConfig+0x274>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009c4:	f7ff fc1a 	bl	80001fc <HAL_GetTick>
 80009c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ca:	e008      	b.n	80009de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009cc:	f7ff fc16 	bl	80001fc <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d901      	bls.n	80009de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009da:	2303      	movs	r3, #3
 80009dc:	e160      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80009e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f0      	beq.n	80009cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fa9c 	bl	8000f28 <RCC_Delay>
 80009f0:	e01c      	b.n	8000a2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_RCC_OscConfig+0x274>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009f8:	f7ff fc00 	bl	80001fc <HAL_GetTick>
 80009fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fe:	e00f      	b.n	8000a20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a00:	f7ff fbfc 	bl	80001fc <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d908      	bls.n	8000a20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e146      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	42420000 	.word	0x42420000
 8000a1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a20:	4b92      	ldr	r3, [pc, #584]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1e9      	bne.n	8000a00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 80a6 	beq.w	8000b86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10d      	bne.n	8000a66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b88      	ldr	r3, [pc, #544]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a87      	ldr	r2, [pc, #540]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b85      	ldr	r3, [pc, #532]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a62:	2301      	movs	r3, #1
 8000a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a66:	4b82      	ldr	r3, [pc, #520]	@ (8000c70 <HAL_RCC_OscConfig+0x4c8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d118      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a72:	4b7f      	ldr	r3, [pc, #508]	@ (8000c70 <HAL_RCC_OscConfig+0x4c8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a7e      	ldr	r2, [pc, #504]	@ (8000c70 <HAL_RCC_OscConfig+0x4c8>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a7e:	f7ff fbbd 	bl	80001fc <HAL_GetTick>
 8000a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a84:	e008      	b.n	8000a98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a86:	f7ff fbb9 	bl	80001fc <HAL_GetTick>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	2b64      	cmp	r3, #100	@ 0x64
 8000a92:	d901      	bls.n	8000a98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a94:	2303      	movs	r3, #3
 8000a96:	e103      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a98:	4b75      	ldr	r3, [pc, #468]	@ (8000c70 <HAL_RCC_OscConfig+0x4c8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f0      	beq.n	8000a86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d106      	bne.n	8000aba <HAL_RCC_OscConfig+0x312>
 8000aac:	4b6f      	ldr	r3, [pc, #444]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6213      	str	r3, [r2, #32]
 8000ab8:	e02d      	b.n	8000b16 <HAL_RCC_OscConfig+0x36e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <HAL_RCC_OscConfig+0x334>
 8000ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	4a69      	ldr	r2, [pc, #420]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ac8:	f023 0301 	bic.w	r3, r3, #1
 8000acc:	6213      	str	r3, [r2, #32]
 8000ace:	4b67      	ldr	r3, [pc, #412]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	4a66      	ldr	r2, [pc, #408]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ad4:	f023 0304 	bic.w	r3, r3, #4
 8000ad8:	6213      	str	r3, [r2, #32]
 8000ada:	e01c      	b.n	8000b16 <HAL_RCC_OscConfig+0x36e>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	d10c      	bne.n	8000afe <HAL_RCC_OscConfig+0x356>
 8000ae4:	4b61      	ldr	r3, [pc, #388]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	4a60      	ldr	r2, [pc, #384]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6213      	str	r3, [r2, #32]
 8000af0:	4b5e      	ldr	r3, [pc, #376]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	4a5d      	ldr	r2, [pc, #372]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6213      	str	r3, [r2, #32]
 8000afc:	e00b      	b.n	8000b16 <HAL_RCC_OscConfig+0x36e>
 8000afe:	4b5b      	ldr	r3, [pc, #364]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	4a5a      	ldr	r2, [pc, #360]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b04:	f023 0301 	bic.w	r3, r3, #1
 8000b08:	6213      	str	r3, [r2, #32]
 8000b0a:	4b58      	ldr	r3, [pc, #352]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4a57      	ldr	r2, [pc, #348]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b10:	f023 0304 	bic.w	r3, r3, #4
 8000b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d015      	beq.n	8000b4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fb6d 	bl	80001fc <HAL_GetTick>
 8000b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b24:	e00a      	b.n	8000b3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b26:	f7ff fb69 	bl	80001fc <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d901      	bls.n	8000b3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e0b1      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0ee      	beq.n	8000b26 <HAL_RCC_OscConfig+0x37e>
 8000b48:	e014      	b.n	8000b74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b4a:	f7ff fb57 	bl	80001fc <HAL_GetTick>
 8000b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b50:	e00a      	b.n	8000b68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b52:	f7ff fb53 	bl	80001fc <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d901      	bls.n	8000b68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e09b      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b68:	4b40      	ldr	r3, [pc, #256]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1ee      	bne.n	8000b52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d105      	bne.n	8000b86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 8087 	beq.w	8000c9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b90:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 030c 	and.w	r3, r3, #12
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d061      	beq.n	8000c60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d146      	bne.n	8000c32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ba4:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <HAL_RCC_OscConfig+0x4cc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000baa:	f7ff fb27 	bl	80001fc <HAL_GetTick>
 8000bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb0:	e008      	b.n	8000bc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bb2:	f7ff fb23 	bl	80001fc <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d901      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e06d      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc4:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f0      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bd8:	d108      	bne.n	8000bec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bda:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	4921      	ldr	r1, [pc, #132]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000be8:	4313      	orrs	r3, r2
 8000bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bec:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a19      	ldr	r1, [r3, #32]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	491b      	ldr	r1, [pc, #108]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000c00:	4313      	orrs	r3, r2
 8000c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <HAL_RCC_OscConfig+0x4cc>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0a:	f7ff faf7 	bl	80001fc <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c10:	e008      	b.n	8000c24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c12:	f7ff faf3 	bl	80001fc <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d901      	bls.n	8000c24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e03d      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f0      	beq.n	8000c12 <HAL_RCC_OscConfig+0x46a>
 8000c30:	e035      	b.n	8000c9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <HAL_RCC_OscConfig+0x4cc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fae0 	bl	80001fc <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c40:	f7ff fadc 	bl	80001fc <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e026      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x498>
 8000c5e:	e01e      	b.n	8000c9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d107      	bne.n	8000c78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e019      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40007000 	.word	0x40007000
 8000c74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_RCC_OscConfig+0x500>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d106      	bne.n	8000c9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e0d0      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d910      	bls.n	8000cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cce:	4b67      	ldr	r3, [pc, #412]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 0207 	bic.w	r2, r3, #7
 8000cd6:	4965      	ldr	r1, [pc, #404]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cde:	4b63      	ldr	r3, [pc, #396]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d001      	beq.n	8000cf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e0b8      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d020      	beq.n	8000d3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d005      	beq.n	8000d14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d08:	4b59      	ldr	r3, [pc, #356]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4a58      	ldr	r2, [pc, #352]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000d12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d20:	4b53      	ldr	r3, [pc, #332]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4a52      	ldr	r2, [pc, #328]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000d2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d2c:	4b50      	ldr	r3, [pc, #320]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	494d      	ldr	r1, [pc, #308]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d040      	beq.n	8000dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d107      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	4b47      	ldr	r3, [pc, #284]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d115      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e07f      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d107      	bne.n	8000d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6a:	4b41      	ldr	r3, [pc, #260]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d109      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e073      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e06b      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d8a:	4b39      	ldr	r3, [pc, #228]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f023 0203 	bic.w	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4936      	ldr	r1, [pc, #216]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d9c:	f7ff fa2e 	bl	80001fc <HAL_GetTick>
 8000da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000da2:	e00a      	b.n	8000dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da4:	f7ff fa2a 	bl	80001fc <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e053      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 020c 	and.w	r2, r3, #12
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d1eb      	bne.n	8000da4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d210      	bcs.n	8000dfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dda:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 0207 	bic.w	r2, r3, #7
 8000de2:	4922      	ldr	r1, [pc, #136]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dea:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d001      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e032      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	4916      	ldr	r1, [pc, #88]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d009      	beq.n	8000e3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	490e      	ldr	r1, [pc, #56]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e3a:	f000 f821 	bl	8000e80 <HAL_RCC_GetSysClockFreq>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	490a      	ldr	r1, [pc, #40]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c8>)
 8000e4c:	5ccb      	ldrb	r3, [r1, r3]
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <HAL_RCC_ClockConfig+0x1cc>)
 8000e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <HAL_RCC_ClockConfig+0x1d0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f98c 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40022000 	.word	0x40022000
 8000e70:	40021000 	.word	0x40021000
 8000e74:	080022fc 	.word	0x080022fc
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000

08000e80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d002      	beq.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x30>
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d003      	beq.n	8000eb6 <HAL_RCC_GetSysClockFreq+0x36>
 8000eae:	e027      	b.n	8000f00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8000eb2:	613b      	str	r3, [r7, #16]
      break;
 8000eb4:	e027      	b.n	8000f06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	0c9b      	lsrs	r3, r3, #18
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ec0:	5cd3      	ldrb	r3, [r2, r3]
 8000ec2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d010      	beq.n	8000ef0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	0c5b      	lsrs	r3, r3, #17
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	4a11      	ldr	r2, [pc, #68]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ee2:	fb03 f202 	mul.w	r2, r3, r2
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e004      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
      break;
 8000efe:	e002      	b.n	8000f06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f02:	613b      	str	r3, [r7, #16]
      break;
 8000f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f06:	693b      	ldr	r3, [r7, #16]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	007a1200 	.word	0x007a1200
 8000f1c:	080022e8 	.word	0x080022e8
 8000f20:	080022f8 	.word	0x080022f8
 8000f24:	003d0900 	.word	0x003d0900

08000f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <RCC_Delay+0x34>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <RCC_Delay+0x38>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f44:	bf00      	nop
  }
  while (Delay --);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	60fa      	str	r2, [r7, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f9      	bne.n	8000f44 <RCC_Delay+0x1c>
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	10624dd3 	.word	0x10624dd3

08000f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e041      	b.n	8000ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d106      	bne.n	8000f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f001 f8ec 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f000 fc0e 	bl	80017c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d001      	beq.n	800101c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e03a      	b.n	8001092 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2202      	movs	r2, #2
 8001020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a18      	ldr	r2, [pc, #96]	@ (800109c <HAL_TIM_Base_Start_IT+0x98>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00e      	beq.n	800105c <HAL_TIM_Base_Start_IT+0x58>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001046:	d009      	beq.n	800105c <HAL_TIM_Base_Start_IT+0x58>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d004      	beq.n	800105c <HAL_TIM_Base_Start_IT+0x58>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d111      	bne.n	8001080 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b06      	cmp	r3, #6
 800106c:	d010      	beq.n	8001090 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0201 	orr.w	r2, r2, #1
 800107c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800107e:	e007      	b.n	8001090 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40012c00 	.word	0x40012c00
 80010a0:	40000400 	.word	0x40000400
 80010a4:	40000800 	.word	0x40000800

080010a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e041      	b.n	800113e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f839 	bl	8001146 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2202      	movs	r2, #2
 80010d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3304      	adds	r3, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f000 fb6c 	bl	80017c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d109      	bne.n	8001180 <HAL_TIM_OC_Start_IT+0x28>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	e022      	b.n	80011c6 <HAL_TIM_OC_Start_IT+0x6e>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2b04      	cmp	r3, #4
 8001184:	d109      	bne.n	800119a <HAL_TIM_OC_Start_IT+0x42>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	bf14      	ite	ne
 8001192:	2301      	movne	r3, #1
 8001194:	2300      	moveq	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	e015      	b.n	80011c6 <HAL_TIM_OC_Start_IT+0x6e>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b08      	cmp	r3, #8
 800119e:	d109      	bne.n	80011b4 <HAL_TIM_OC_Start_IT+0x5c>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	e008      	b.n	80011c6 <HAL_TIM_OC_Start_IT+0x6e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b01      	cmp	r3, #1
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0a9      	b.n	8001322 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <HAL_TIM_OC_Start_IT+0x86>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2202      	movs	r2, #2
 80011d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80011dc:	e013      	b.n	8001206 <HAL_TIM_OC_Start_IT+0xae>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d104      	bne.n	80011ee <HAL_TIM_OC_Start_IT+0x96>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80011ec:	e00b      	b.n	8001206 <HAL_TIM_OC_Start_IT+0xae>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d104      	bne.n	80011fe <HAL_TIM_OC_Start_IT+0xa6>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80011fc:	e003      	b.n	8001206 <HAL_TIM_OC_Start_IT+0xae>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2202      	movs	r2, #2
 8001202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b0c      	cmp	r3, #12
 800120a:	d841      	bhi.n	8001290 <HAL_TIM_OC_Start_IT+0x138>
 800120c:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <HAL_TIM_OC_Start_IT+0xbc>)
 800120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001212:	bf00      	nop
 8001214:	08001249 	.word	0x08001249
 8001218:	08001291 	.word	0x08001291
 800121c:	08001291 	.word	0x08001291
 8001220:	08001291 	.word	0x08001291
 8001224:	0800125b 	.word	0x0800125b
 8001228:	08001291 	.word	0x08001291
 800122c:	08001291 	.word	0x08001291
 8001230:	08001291 	.word	0x08001291
 8001234:	0800126d 	.word	0x0800126d
 8001238:	08001291 	.word	0x08001291
 800123c:	08001291 	.word	0x08001291
 8001240:	08001291 	.word	0x08001291
 8001244:	0800127f 	.word	0x0800127f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0202 	orr.w	r2, r2, #2
 8001256:	60da      	str	r2, [r3, #12]
      break;
 8001258:	e01d      	b.n	8001296 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0204 	orr.w	r2, r2, #4
 8001268:	60da      	str	r2, [r3, #12]
      break;
 800126a:	e014      	b.n	8001296 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0208 	orr.w	r2, r2, #8
 800127a:	60da      	str	r2, [r3, #12]
      break;
 800127c:	e00b      	b.n	8001296 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0210 	orr.w	r2, r2, #16
 800128c:	60da      	str	r2, [r3, #12]
      break;
 800128e:	e002      	b.n	8001296 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
      break;
 8001294:	bf00      	nop
  }

  if (status == HAL_OK)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d141      	bne.n	8001320 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fd0d 	bl	8001cc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1f      	ldr	r2, [pc, #124]	@ (800132c <HAL_TIM_OC_Start_IT+0x1d4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d107      	bne.n	80012c4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a18      	ldr	r2, [pc, #96]	@ (800132c <HAL_TIM_OC_Start_IT+0x1d4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00e      	beq.n	80012ec <HAL_TIM_OC_Start_IT+0x194>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d6:	d009      	beq.n	80012ec <HAL_TIM_OC_Start_IT+0x194>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <HAL_TIM_OC_Start_IT+0x1d8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d004      	beq.n	80012ec <HAL_TIM_OC_Start_IT+0x194>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a13      	ldr	r2, [pc, #76]	@ (8001334 <HAL_TIM_OC_Start_IT+0x1dc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d111      	bne.n	8001310 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d010      	beq.n	8001320 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800130e:	e007      	b.n	8001320 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40012c00 	.word	0x40012c00
 8001330:	40000400 	.word	0x40000400
 8001334:	40000800 	.word	0x40000800

08001338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b02      	cmp	r3, #2
 800134c:	d122      	bne.n	8001394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b02      	cmp	r3, #2
 800135a:	d11b      	bne.n	8001394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f06f 0202 	mvn.w	r2, #2
 8001364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fa07 	bl	800178e <HAL_TIM_IC_CaptureCallback>
 8001380:	e005      	b.n	800138e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fd48 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fa09 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d122      	bne.n	80013e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d11b      	bne.n	80013e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f06f 0204 	mvn.w	r2, #4
 80013b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2202      	movs	r2, #2
 80013be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f9dd 	bl	800178e <HAL_TIM_IC_CaptureCallback>
 80013d4:	e005      	b.n	80013e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fd1e 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f9df 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d122      	bne.n	800143c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b08      	cmp	r3, #8
 8001402:	d11b      	bne.n	800143c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0208 	mvn.w	r2, #8
 800140c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2204      	movs	r2, #4
 8001412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f9b3 	bl	800178e <HAL_TIM_IC_CaptureCallback>
 8001428:	e005      	b.n	8001436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fcf4 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f9b5 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b10      	cmp	r3, #16
 8001448:	d122      	bne.n	8001490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b10      	cmp	r3, #16
 8001456:	d11b      	bne.n	8001490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f06f 0210 	mvn.w	r2, #16
 8001460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2208      	movs	r2, #8
 8001466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f989 	bl	800178e <HAL_TIM_IC_CaptureCallback>
 800147c:	e005      	b.n	800148a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fcca 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f98b 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10e      	bne.n	80014bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d107      	bne.n	80014bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f06f 0201 	mvn.w	r2, #1
 80014b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fc98 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c6:	2b80      	cmp	r3, #128	@ 0x80
 80014c8:	d10e      	bne.n	80014e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d4:	2b80      	cmp	r3, #128	@ 0x80
 80014d6:	d107      	bne.n	80014e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80014e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fc79 	bl	8001dda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f2:	2b40      	cmp	r3, #64	@ 0x40
 80014f4:	d10e      	bne.n	8001514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001500:	2b40      	cmp	r3, #64	@ 0x40
 8001502:	d107      	bne.n	8001514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800150c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f94f 	bl	80017b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b20      	cmp	r3, #32
 8001520:	d10e      	bne.n	8001540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	2b20      	cmp	r3, #32
 800152e:	d107      	bne.n	8001540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f06f 0220 	mvn.w	r2, #32
 8001538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fc44 	bl	8001dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001562:	2302      	movs	r3, #2
 8001564:	e048      	b.n	80015f8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d839      	bhi.n	80015e8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8001574:	a201      	add	r2, pc, #4	@ (adr r2, 800157c <HAL_TIM_OC_ConfigChannel+0x34>)
 8001576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157a:	bf00      	nop
 800157c:	080015b1 	.word	0x080015b1
 8001580:	080015e9 	.word	0x080015e9
 8001584:	080015e9 	.word	0x080015e9
 8001588:	080015e9 	.word	0x080015e9
 800158c:	080015bf 	.word	0x080015bf
 8001590:	080015e9 	.word	0x080015e9
 8001594:	080015e9 	.word	0x080015e9
 8001598:	080015e9 	.word	0x080015e9
 800159c:	080015cd 	.word	0x080015cd
 80015a0:	080015e9 	.word	0x080015e9
 80015a4:	080015e9 	.word	0x080015e9
 80015a8:	080015e9 	.word	0x080015e9
 80015ac:	080015db 	.word	0x080015db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f966 	bl	8001888 <TIM_OC1_SetConfig>
      break;
 80015bc:	e017      	b.n	80015ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f9c5 	bl	8001954 <TIM_OC2_SetConfig>
      break;
 80015ca:	e010      	b.n	80015ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fa28 	bl	8001a28 <TIM_OC3_SetConfig>
      break;
 80015d8:	e009      	b.n	80015ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fa8b 	bl	8001afc <TIM_OC4_SetConfig>
      break;
 80015e6:	e002      	b.n	80015ee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	75fb      	strb	r3, [r7, #23]
      break;
 80015ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_TIM_ConfigClockSource+0x1c>
 8001618:	2302      	movs	r3, #2
 800161a:	e0b4      	b.n	8001786 <HAL_TIM_ConfigClockSource+0x186>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800163a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001654:	d03e      	beq.n	80016d4 <HAL_TIM_ConfigClockSource+0xd4>
 8001656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800165a:	f200 8087 	bhi.w	800176c <HAL_TIM_ConfigClockSource+0x16c>
 800165e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001662:	f000 8086 	beq.w	8001772 <HAL_TIM_ConfigClockSource+0x172>
 8001666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800166a:	d87f      	bhi.n	800176c <HAL_TIM_ConfigClockSource+0x16c>
 800166c:	2b70      	cmp	r3, #112	@ 0x70
 800166e:	d01a      	beq.n	80016a6 <HAL_TIM_ConfigClockSource+0xa6>
 8001670:	2b70      	cmp	r3, #112	@ 0x70
 8001672:	d87b      	bhi.n	800176c <HAL_TIM_ConfigClockSource+0x16c>
 8001674:	2b60      	cmp	r3, #96	@ 0x60
 8001676:	d050      	beq.n	800171a <HAL_TIM_ConfigClockSource+0x11a>
 8001678:	2b60      	cmp	r3, #96	@ 0x60
 800167a:	d877      	bhi.n	800176c <HAL_TIM_ConfigClockSource+0x16c>
 800167c:	2b50      	cmp	r3, #80	@ 0x50
 800167e:	d03c      	beq.n	80016fa <HAL_TIM_ConfigClockSource+0xfa>
 8001680:	2b50      	cmp	r3, #80	@ 0x50
 8001682:	d873      	bhi.n	800176c <HAL_TIM_ConfigClockSource+0x16c>
 8001684:	2b40      	cmp	r3, #64	@ 0x40
 8001686:	d058      	beq.n	800173a <HAL_TIM_ConfigClockSource+0x13a>
 8001688:	2b40      	cmp	r3, #64	@ 0x40
 800168a:	d86f      	bhi.n	800176c <HAL_TIM_ConfigClockSource+0x16c>
 800168c:	2b30      	cmp	r3, #48	@ 0x30
 800168e:	d064      	beq.n	800175a <HAL_TIM_ConfigClockSource+0x15a>
 8001690:	2b30      	cmp	r3, #48	@ 0x30
 8001692:	d86b      	bhi.n	800176c <HAL_TIM_ConfigClockSource+0x16c>
 8001694:	2b20      	cmp	r3, #32
 8001696:	d060      	beq.n	800175a <HAL_TIM_ConfigClockSource+0x15a>
 8001698:	2b20      	cmp	r3, #32
 800169a:	d867      	bhi.n	800176c <HAL_TIM_ConfigClockSource+0x16c>
 800169c:	2b00      	cmp	r3, #0
 800169e:	d05c      	beq.n	800175a <HAL_TIM_ConfigClockSource+0x15a>
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d05a      	beq.n	800175a <HAL_TIM_ConfigClockSource+0x15a>
 80016a4:	e062      	b.n	800176c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80016b6:	f000 fae6 	bl	8001c86 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80016c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	609a      	str	r2, [r3, #8]
      break;
 80016d2:	e04f      	b.n	8001774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80016e4:	f000 facf 	bl	8001c86 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016f6:	609a      	str	r2, [r3, #8]
      break;
 80016f8:	e03c      	b.n	8001774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001706:	461a      	mov	r2, r3
 8001708:	f000 fa46 	bl	8001b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2150      	movs	r1, #80	@ 0x50
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fa9d 	bl	8001c52 <TIM_ITRx_SetConfig>
      break;
 8001718:	e02c      	b.n	8001774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001726:	461a      	mov	r2, r3
 8001728:	f000 fa64 	bl	8001bf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2160      	movs	r1, #96	@ 0x60
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fa8d 	bl	8001c52 <TIM_ITRx_SetConfig>
      break;
 8001738:	e01c      	b.n	8001774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001746:	461a      	mov	r2, r3
 8001748:	f000 fa26 	bl	8001b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2140      	movs	r1, #64	@ 0x40
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fa7d 	bl	8001c52 <TIM_ITRx_SetConfig>
      break;
 8001758:	e00c      	b.n	8001774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f000 fa74 	bl	8001c52 <TIM_ITRx_SetConfig>
      break;
 800176a:	e003      	b.n	8001774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
      break;
 8001770:	e000      	b.n	8001774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a29      	ldr	r2, [pc, #164]	@ (800187c <TIM_Base_SetConfig+0xb8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00b      	beq.n	80017f4 <TIM_Base_SetConfig+0x30>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e2:	d007      	beq.n	80017f4 <TIM_Base_SetConfig+0x30>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a26      	ldr	r2, [pc, #152]	@ (8001880 <TIM_Base_SetConfig+0xbc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d003      	beq.n	80017f4 <TIM_Base_SetConfig+0x30>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a25      	ldr	r2, [pc, #148]	@ (8001884 <TIM_Base_SetConfig+0xc0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d108      	bne.n	8001806 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1c      	ldr	r2, [pc, #112]	@ (800187c <TIM_Base_SetConfig+0xb8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00b      	beq.n	8001826 <TIM_Base_SetConfig+0x62>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001814:	d007      	beq.n	8001826 <TIM_Base_SetConfig+0x62>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <TIM_Base_SetConfig+0xbc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d003      	beq.n	8001826 <TIM_Base_SetConfig+0x62>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <TIM_Base_SetConfig+0xc0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d108      	bne.n	8001838 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800182c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a07      	ldr	r2, [pc, #28]	@ (800187c <TIM_Base_SetConfig+0xb8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d103      	bne.n	800186c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	615a      	str	r2, [r3, #20]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40012c00 	.word	0x40012c00
 8001880:	40000400 	.word	0x40000400
 8001884:	40000800 	.word	0x40000800

08001888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f023 0201 	bic.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f023 0303 	bic.w	r3, r3, #3
 80018be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f023 0302 	bic.w	r3, r3, #2
 80018d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a1c      	ldr	r2, [pc, #112]	@ (8001950 <TIM_OC1_SetConfig+0xc8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d10c      	bne.n	80018fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f023 0308 	bic.w	r3, r3, #8
 80018ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <TIM_OC1_SetConfig+0xc8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d111      	bne.n	800192a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800190c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	621a      	str	r2, [r3, #32]
}
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40012c00 	.word	0x40012c00

08001954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f023 0210 	bic.w	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800198a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f023 0320 	bic.w	r3, r3, #32
 800199e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001a24 <TIM_OC2_SetConfig+0xd0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10d      	bne.n	80019d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80019ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80019ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a14      	ldr	r2, [pc, #80]	@ (8001a24 <TIM_OC2_SetConfig+0xd0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d113      	bne.n	8001a00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80019e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	621a      	str	r2, [r3, #32]
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40012c00 	.word	0x40012c00

08001a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <TIM_OC3_SetConfig+0xd0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10d      	bne.n	8001aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <TIM_OC3_SetConfig+0xd0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d113      	bne.n	8001ad2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	621a      	str	r2, [r3, #32]
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40012c00 	.word	0x40012c00

08001afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	031b      	lsls	r3, r3, #12
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <TIM_OC4_SetConfig+0x98>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d109      	bne.n	8001b70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	621a      	str	r2, [r3, #32]
}
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40012c00 	.word	0x40012c00

08001b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	f023 0201 	bic.w	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f023 030a 	bic.w	r3, r3, #10
 8001bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	621a      	str	r2, [r3, #32]
}
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	f023 0210 	bic.w	r2, r3, #16
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	031b      	lsls	r3, r3, #12
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001c30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	621a      	str	r2, [r3, #32]
}
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f043 0307 	orr.w	r3, r3, #7
 8001c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	609a      	str	r2, [r3, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	021a      	lsls	r2, r3, #8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	609a      	str	r2, [r3, #8]
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	621a      	str	r2, [r3, #32]
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e046      	b.n	8001db2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a16      	ldr	r2, [pc, #88]	@ (8001dbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00e      	beq.n	8001d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d70:	d009      	beq.n	8001d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d004      	beq.n	8001d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10c      	bne.n	8001da0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800

08001dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_PeriodElapsedCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {		// 인터럽트가 발생 하면 LED ON
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d104      	bne.n	8001e08 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC,
 8001dfe:	2201      	movs	r2, #1
 8001e00:	21ff      	movs	r1, #255	@ 0xff
 8001e02:	4804      	ldr	r0, [pc, #16]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e04:	f7fe fc96 	bl	8000734 <HAL_GPIO_WritePin>
				GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
						| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_SET);
	}

}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40011000 	.word	0x40011000

08001e18 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {	 	// 인터럽트가 발생하면 LED OFF
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d104      	bne.n	8001e34 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC,
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	21ff      	movs	r1, #255	@ 0xff
 8001e2e:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8001e30:	f7fe fc80 	bl	8000734 <HAL_GPIO_WritePin>
				GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
						| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
	}
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40011000 	.word	0x40011000

08001e44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e48:	f7fe f980 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e4c:	f000 f812 	bl	8001e74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e50:	f000 f8dc 	bl	800200c <MX_GPIO_Init>
	MX_TIM3_Init();
 8001e54:	f000 f85c 	bl	8001f10 <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001e58:	f000 f84d 	bl	8001ef6 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <main+0x2c>)
 8001e5e:	f7ff f8d1 	bl	8001004 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001e62:	2100      	movs	r1, #0
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <main+0x2c>)
 8001e66:	f7ff f977 	bl	8001158 <HAL_TIM_OC_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001e6a:	bf00      	nop
 8001e6c:	e7fd      	b.n	8001e6a <main+0x26>
 8001e6e:	bf00      	nop
 8001e70:	2000002c 	.word	0x2000002c

08001e74 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b090      	sub	sp, #64	@ 0x40
 8001e78:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e7a:	f107 0318 	add.w	r3, r7, #24
 8001e7e:	2228      	movs	r2, #40	@ 0x28
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f9f7 	bl	8002276 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001eaa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fc77 	bl	80007a8 <HAL_RCC_OscConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0x50>
		Error_Handler();
 8001ec0:	f000 f91a 	bl	80020f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2102      	movs	r1, #2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fee4 	bl	8000cac <HAL_RCC_ClockConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0x7a>
		Error_Handler();
 8001eea:	f000 f905 	bl	80020f8 <Error_Handler>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3740      	adds	r7, #64	@ 0x40
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	af00      	add	r7, sp, #0
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	201d      	movs	r0, #29
 8001f00:	f7fe fa5d 	bl	80003be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f04:	201d      	movs	r0, #29
 8001f06:	f7fe fa76 	bl	80003f6 <HAL_NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	@ 0x38
 8001f14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f24:	f107 0320 	add.w	r3, r7, #32
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
 8001f3c:	615a      	str	r2, [r3, #20]
 8001f3e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001f40:	4b30      	ldr	r3, [pc, #192]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f42:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <MX_TIM3_Init+0xf8>)
 8001f44:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 6400 - 1;
 8001f46:	4b2f      	ldr	r3, [pc, #188]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f48:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001f4c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50000 - 1;					// 5초
 8001f54:	4b2b      	ldr	r3, [pc, #172]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f56:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001f5a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5c:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f62:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001f68:	4826      	ldr	r0, [pc, #152]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f6a:	f7fe fffb 	bl	8000f64 <HAL_TIM_Base_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM3_Init+0x68>
		Error_Handler();
 8001f74:	f000 f8c0 	bl	80020f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001f7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f82:	4619      	mov	r1, r3
 8001f84:	481f      	ldr	r0, [pc, #124]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f86:	f7ff fb3b 	bl	8001600 <HAL_TIM_ConfigClockSource>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0x84>
		Error_Handler();
 8001f90:	f000 f8b2 	bl	80020f8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK) {
 8001f94:	481b      	ldr	r0, [pc, #108]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001f96:	f7ff f887 	bl	80010a8 <HAL_TIM_OC_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM3_Init+0x94>
		Error_Handler();
 8001fa0:	f000 f8aa 	bl	80020f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4814      	ldr	r0, [pc, #80]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001fb4:	f7ff feaa 	bl	8001d0c <HAL_TIMEx_MasterConfigSynchronization>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001fbe:	f000 f89b 	bl	80020f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 20000 - 1;				// 2초에 인터럽트, 즉 2초 동안 LED ON 나머지 3초 동안 LED OFF
 8001fc6:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8001fca:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480a      	ldr	r0, [pc, #40]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001fdc:	f7ff fab4 	bl	8001548 <HAL_TIM_OC_ConfigChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM3_Init+0xda>
		Error_Handler();
 8001fe6:	f000 f887 	bl	80020f8 <Error_Handler>
	}
	__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <MX_TIM3_Init+0xf4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0208 	orr.w	r2, r2, #8
 8001ff8:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	3738      	adds	r7, #56	@ 0x38
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000002c 	.word	0x2000002c
 8002008:	40000400 	.word	0x40000400

0800200c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002020:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a30      	ldr	r2, [pc, #192]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a2a      	ldr	r2, [pc, #168]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a24      	ldr	r2, [pc, #144]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <MX_GPIO_Init+0xdc>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8002068:	2200      	movs	r2, #0
 800206a:	21ff      	movs	r1, #255	@ 0xff
 800206c:	481f      	ldr	r0, [pc, #124]	@ (80020ec <MX_GPIO_Init+0xe0>)
 800206e:	f7fe fb61 	bl	8000734 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	2120      	movs	r1, #32
 8002076:	481e      	ldr	r0, [pc, #120]	@ (80020f0 <MX_GPIO_Init+0xe4>)
 8002078:	f7fe fb5c 	bl	8000734 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800207c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002080:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <MX_GPIO_Init+0xe8>)
 8002084:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	4619      	mov	r1, r3
 8002090:	4816      	ldr	r0, [pc, #88]	@ (80020ec <MX_GPIO_Init+0xe0>)
 8002092:	f7fe f9cb 	bl	800042c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 PC2 PC3
	 PC4 PC5 PC6 PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8002096:	23ff      	movs	r3, #255	@ 0xff
 8002098:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	4619      	mov	r1, r3
 80020ac:	480f      	ldr	r0, [pc, #60]	@ (80020ec <MX_GPIO_Init+0xe0>)
 80020ae:	f7fe f9bd 	bl	800042c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80020b2:	2320      	movs	r3, #32
 80020b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2302      	movs	r3, #2
 80020c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	4619      	mov	r1, r3
 80020c8:	4809      	ldr	r0, [pc, #36]	@ (80020f0 <MX_GPIO_Init+0xe4>)
 80020ca:	f7fe f9af 	bl	800042c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2028      	movs	r0, #40	@ 0x28
 80020d4:	f7fe f973 	bl	80003be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020d8:	2028      	movs	r0, #40	@ 0x28
 80020da:	f7fe f98c 	bl	80003f6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80020de:	bf00      	nop
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40010800 	.word	0x40010800
 80020f4:	10110000 	.word	0x10110000

080020f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020fc:	b672      	cpsid	i
}
 80020fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <Error_Handler+0x8>

08002104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <HAL_MspInit+0x5c>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <HAL_MspInit+0x5c>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_MspInit+0x5c>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_MspInit+0x5c>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <HAL_MspInit+0x5c>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_MspInit+0x5c>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_MspInit+0x60>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_MspInit+0x60>)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000

08002168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a09      	ldr	r2, [pc, #36]	@ (800219c <HAL_TIM_Base_MspInit+0x34>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10b      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_TIM_Base_MspInit+0x38>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_TIM_Base_MspInit+0x38>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_TIM_Base_MspInit+0x38>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40000400 	.word	0x40000400
 80021a0:	40021000 	.word	0x40021000

080021a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <NMI_Handler+0x4>

080021ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <MemManage_Handler+0x4>

080021bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <UsageFault_Handler+0x4>

080021cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f4:	f7fd fff0 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <TIM3_IRQHandler+0x10>)
 8002202:	f7ff f899 	bl	8001338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000002c 	.word	0x2000002c

08002210 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002214:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002218:	f7fe faa4 	bl	8000764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800222c:	f7ff fff8 	bl	8002220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002230:	480b      	ldr	r0, [pc, #44]	@ (8002260 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002232:	490c      	ldr	r1, [pc, #48]	@ (8002264 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002234:	4a0c      	ldr	r2, [pc, #48]	@ (8002268 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a09      	ldr	r2, [pc, #36]	@ (800226c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002248:	4c09      	ldr	r4, [pc, #36]	@ (8002270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002256:	f000 f817 	bl	8002288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800225a:	f7ff fdf3 	bl	8001e44 <main>
  bx lr
 800225e:	4770      	bx	lr
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002268:	08002314 	.word	0x08002314
  ldr r2, =_sbss
 800226c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002270:	20000074 	.word	0x20000074

08002274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC1_2_IRQHandler>

08002276 <memset>:
 8002276:	4603      	mov	r3, r0
 8002278:	4402      	add	r2, r0
 800227a:	4293      	cmp	r3, r2
 800227c:	d100      	bne.n	8002280 <memset+0xa>
 800227e:	4770      	bx	lr
 8002280:	f803 1b01 	strb.w	r1, [r3], #1
 8002284:	e7f9      	b.n	800227a <memset+0x4>
	...

08002288 <__libc_init_array>:
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	2600      	movs	r6, #0
 800228c:	4d0c      	ldr	r5, [pc, #48]	@ (80022c0 <__libc_init_array+0x38>)
 800228e:	4c0d      	ldr	r4, [pc, #52]	@ (80022c4 <__libc_init_array+0x3c>)
 8002290:	1b64      	subs	r4, r4, r5
 8002292:	10a4      	asrs	r4, r4, #2
 8002294:	42a6      	cmp	r6, r4
 8002296:	d109      	bne.n	80022ac <__libc_init_array+0x24>
 8002298:	f000 f81a 	bl	80022d0 <_init>
 800229c:	2600      	movs	r6, #0
 800229e:	4d0a      	ldr	r5, [pc, #40]	@ (80022c8 <__libc_init_array+0x40>)
 80022a0:	4c0a      	ldr	r4, [pc, #40]	@ (80022cc <__libc_init_array+0x44>)
 80022a2:	1b64      	subs	r4, r4, r5
 80022a4:	10a4      	asrs	r4, r4, #2
 80022a6:	42a6      	cmp	r6, r4
 80022a8:	d105      	bne.n	80022b6 <__libc_init_array+0x2e>
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
 80022ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b0:	4798      	blx	r3
 80022b2:	3601      	adds	r6, #1
 80022b4:	e7ee      	b.n	8002294 <__libc_init_array+0xc>
 80022b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ba:	4798      	blx	r3
 80022bc:	3601      	adds	r6, #1
 80022be:	e7f2      	b.n	80022a6 <__libc_init_array+0x1e>
 80022c0:	0800230c 	.word	0x0800230c
 80022c4:	0800230c 	.word	0x0800230c
 80022c8:	0800230c 	.word	0x0800230c
 80022cc:	08002310 	.word	0x08002310

080022d0 <_init>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr

080022dc <_fini>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	bf00      	nop
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr
